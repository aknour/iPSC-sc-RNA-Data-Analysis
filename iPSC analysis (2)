{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "grave-reliance",
   "metadata": {},
   "source": [
    "## Single-Cell Analysis (2):\n",
    "- Cell type: Induced Pluripotent stem cell (iPSC)\n",
    "- Title: \"RNA-seq analysis of RALD iPSCs after in vitro differentiation\"\n",
    "    - RNA-seq analysis was conducted to compare gene expression profiles of WT/WT and G13C/WT iPS cells after in vitro differentiation. We found some differences of gene expression profiles regarding stemness and linage markers in the two genotypes.\n",
    "- Data: \n",
    "    - To investigate the changes of stemness and linage markers between KRAS mutant and wild-type iPSCs after differentiation, the iPSCs were differentiated for 16 days . Two clones were used for each genotype (WT/WT and G13C/WT) before and after differentiation, resulting in total 8 conditions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "excessive-funds",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: scprep in /root/.local/lib/python3.8/site-packages (1.1.0)\n",
      "Requirement already satisfied: scikit-learn>=0.19.1 in /opt/python/lib/python3.8/site-packages (from scprep) (0.24.0)\n",
      "Requirement already satisfied: decorator>=4.3.0 in /opt/python/lib/python3.8/site-packages (from scprep) (4.4.2)\n",
      "Requirement already satisfied: pandas>=0.25 in /opt/python/lib/python3.8/site-packages (from scprep) (1.2.0)\n",
      "Requirement already satisfied: numpy>=1.12.0 in /opt/python/lib/python3.8/site-packages (from scprep) (1.19.5)\n",
      "Requirement already satisfied: packaging in /opt/python/lib/python3.8/site-packages (from scprep) (20.8)\n",
      "Requirement already satisfied: scipy>=0.18.1 in /opt/python/lib/python3.8/site-packages (from scprep) (1.6.0)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /opt/python/lib/python3.8/site-packages (from pandas>=0.25->scprep) (2.8.1)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/python/lib/python3.8/site-packages (from pandas>=0.25->scprep) (2020.5)\n",
      "Requirement already satisfied: six>=1.5 in /opt/python/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas>=0.25->scprep) (1.15.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.19.1->scprep) (2.1.0)\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.19.1->scprep) (1.0.0)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in /opt/python/lib/python3.8/site-packages (from packaging->scprep) (2.4.7)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --user scprep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "numeric-pattern",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in /opt/python/lib/python3.8/site-packages (3.3.3)\n",
      "Requirement already satisfied: numpy>=1.15 in /opt/python/lib/python3.8/site-packages (from matplotlib) (1.19.5)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/python/lib/python3.8/site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/python/lib/python3.8/site-packages (from matplotlib) (8.1.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/python/lib/python3.8/site-packages (from matplotlib) (2.4.7)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/python/lib/python3.8/site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/python/lib/python3.8/site-packages (from matplotlib) (2.8.1)\n",
      "Requirement already satisfied: six in /opt/python/lib/python3.8/site-packages (from cycler>=0.10->matplotlib) (1.15.0)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "amazing-classic",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in /opt/python/lib/python3.8/site-packages (1.2.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/python/lib/python3.8/site-packages (from pandas) (2020.5)\n",
      "Requirement already satisfied: numpy>=1.16.5 in /opt/python/lib/python3.8/site-packages (from pandas) (1.19.5)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /opt/python/lib/python3.8/site-packages (from pandas) (2.8.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/python/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "stretch-walker",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scprep\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "internal-integral",
   "metadata": {},
   "source": [
    "## iPSC Data analysis:\n",
    "- https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE111345\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "close-houston",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>gene_symbol</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>5S_rRNA</th>\n",
       "      <th>...</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>uc_338</th>\n",
       "      <th>yR211F11.2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C1undiff_TPM</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C8undiff_TPM</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10undiff_TPM</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21undiff_TPM</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C1diff_TPM</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 58233 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "gene_symbol   5S_rRNA  5S_rRNA  5S_rRNA  5S_rRNA  5S_rRNA  5S_rRNA  5S_rRNA  \\\n",
       "C1undiff_TPM      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "C8undiff_TPM      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "10undiff_TPM      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "21undiff_TPM      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "C1diff_TPM        0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "\n",
       "gene_symbol   5S_rRNA  5S_rRNA  5S_rRNA  ...  uc_338  uc_338  uc_338  uc_338  \\\n",
       "C1undiff_TPM      0.0      0.0      0.0  ...     0.0     0.0     0.0     0.0   \n",
       "C8undiff_TPM      0.0      0.0      0.0  ...     0.0     0.0     0.0     0.0   \n",
       "10undiff_TPM      0.0      0.0      0.0  ...     0.0     0.0     0.0     0.0   \n",
       "21undiff_TPM      0.0      0.0      0.0  ...     0.0     0.0     0.0     0.0   \n",
       "C1diff_TPM        0.0      0.0      0.0  ...     0.0     0.0     0.0     0.0   \n",
       "\n",
       "gene_symbol   uc_338  uc_338  uc_338  uc_338  uc_338  yR211F11.2  \n",
       "C1undiff_TPM     0.0     0.0     0.0     0.0     0.0         0.0  \n",
       "C8undiff_TPM     0.0     0.0     0.0     0.0     0.0         0.0  \n",
       "10undiff_TPM     0.0     0.0     0.0     0.0     0.0         0.0  \n",
       "21undiff_TPM     0.0     0.0     0.0     0.0     0.0         0.0  \n",
       "C1diff_TPM       0.0     0.0     0.0     0.0     0.0         0.0  \n",
       "\n",
       "[5 rows x 58233 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "iPSC_file_read = pd.read_csv('Desktop/Projects/School/iPSC/(Natalie_1) GSE111345_ProcessedDataSheet.csv', na_filter=False, parse_dates = True)\n",
    "iPSC_file_read.index = iPSC_file_read[\"gene_symbol\"]\n",
    "iPSC_file_read_T = iPSC_file_read.drop([ \"gene_symbol\", \"tracking_id\"], axis=1).T\n",
    "iPSC_file_read_T.head(5)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "blond-hierarchy",
   "metadata": {},
   "source": [
    "In order to complete a volcano plot, I need to first determien which sample is mutant and wild-type"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cosmetic-negative",
   "metadata": {},
   "source": [
    "### Preprocessing/ Loading/ Filtering\n",
    "#### Normalization: \n",
    "# Error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "pointed-fabric",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/.local/lib/python3.8/site-packages/scprep/select.py:369: UserWarning: No selection conditions provided. Returning all columns.\n",
      "  warnings.warn(\n",
      "/root/.local/lib/python3.8/site-packages/scprep/select.py:369: UserWarning: No selection conditions provided. Returning all columns.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C1undiff_TPM</th>\n",
       "      <th>C8undiff_TPM</th>\n",
       "      <th>10undiff_TPM</th>\n",
       "      <th>21undiff_TPM</th>\n",
       "      <th>C1diff_TPM</th>\n",
       "      <th>C8diff_TPM</th>\n",
       "      <th>10diff_TPM</th>\n",
       "      <th>21diff_TPM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gene_symbol</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>1.42</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yR211F11.2</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53920 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             C1undiff_TPM  C8undiff_TPM  10undiff_TPM  21undiff_TPM  \\\n",
       "gene_symbol                                                           \n",
       "7SK                  0.00           0.0           0.0           0.0   \n",
       "7SK                  0.00           0.0           0.0           0.0   \n",
       "7SK                  0.00           0.0           0.0           0.0   \n",
       "7SK                  0.00           0.0           0.0           0.0   \n",
       "7SK                  1.42           0.0           0.0           0.0   \n",
       "...                   ...           ...           ...           ...   \n",
       "uc_338               0.00           0.0           0.0           0.0   \n",
       "uc_338               0.00           0.0           0.0           0.0   \n",
       "uc_338               0.00           0.0           0.0           0.0   \n",
       "uc_338               0.00           0.0           0.0           0.0   \n",
       "yR211F11.2           0.00           0.0           0.0           0.0   \n",
       "\n",
       "             C1diff_TPM  C8diff_TPM  10diff_TPM  21diff_TPM  \n",
       "gene_symbol                                                  \n",
       "7SK                0.00         0.0         0.0        1.55  \n",
       "7SK                0.00         0.0         0.0        0.00  \n",
       "7SK                0.55         0.0         0.0        1.05  \n",
       "7SK                0.00         0.0         0.0        0.00  \n",
       "7SK                0.00         0.0         0.0        0.00  \n",
       "...                 ...         ...         ...         ...  \n",
       "uc_338             0.00         0.0         0.0        0.00  \n",
       "uc_338             0.00         0.0         0.0        0.00  \n",
       "uc_338             0.00         0.0         0.0        0.00  \n",
       "uc_338             0.00         0.0         0.0        0.00  \n",
       "yR211F11.2         0.00         0.0         0.0        0.37  \n",
       "\n",
       "[53920 rows x 8 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filtered-transposed Data\n",
    "iPSC_data = scprep.filter.filter_gene_set_expression(iPSC_file_read_T, cutoff=0.01, library_size_normalize=True, keep_cells='above')\n",
    "iPSC_data\n",
    "\n",
    "#Filtered Data \n",
    "iPSC_file_read = iPSC_file_read.drop([ \"gene_symbol\", \"tracking_id\"], axis=1)\n",
    "iPSC_data_T = scprep.filter.filter_gene_set_expression(iPSC_file_read, cutoff=0.01, library_size_normalize=True, keep_cells='above')\n",
    "iPSC_data_T\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "toxic-wyoming",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "genes_per_cell = np.sum(iPSC_data > 0, axis=0)\n",
    "\n",
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(genes_per_cell, bins=50)\n",
    "ax.set_xlabel('Count Depth')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Gene detection across cells')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dietary-lobby",
   "metadata": {},
   "source": [
    "#### Removing cells with high mitochondrial gene expression (Quality Control)\n",
    "# Error: try again after rescaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "equipped-finger",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Mitochondrial expression')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# get mitochondrial genes\n",
    "mitochondrial_gene_list = np.array([g.startswith('MT') for g in iPSC_data.columns])\n",
    "mitochondrial_gene_list\n",
    "#mitochondrial_gene_list\n",
    "\n",
    "# get expression\n",
    "mito_exp = iPSC_data.loc[:,mitochondrial_gene_list].mean(axis=1)\n",
    "\n",
    "# plotting\n",
    "fig, ax = plt.subplots(1, figsize=(6,6))\n",
    "\n",
    "ax.hist(mito_exp, bins=45)\n",
    "ax.axvline(np.percentile(mito_exp, 90), color= 'red')\n",
    "ax.set_xlabel('Mean mitochondrial expression')\n",
    "ax.set_ylabel('# of cells')\n",
    "ax.set_title('Mitochondrial expression')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dependent-biography",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Applied to skewed data \n",
    "iPSC_data_log = scprep.transform.log(iPSC_data_T)\n",
    "\n",
    "genes_per_cell = np.sum(iPSC_data_log > 0)\n",
    "\n",
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(genes_per_cell, bins=10)\n",
    "ax.set_xlabel('Genes')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Gene detection across Samples')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "introductory-glance",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(iPSC_data_log, bins=50)\n",
    "ax.set_xlabel('Genes')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Gene detection across Samples')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "hearing-termination",
   "metadata": {},
   "source": [
    "#### Transforming the data\n",
    "- The purpose of transforming data is to make sure that each gene or feature in our counts matrix is counted equally. \n",
    "- Genes that are more highly expressed (i.e. have larger values) will be considered more important and will have a larger impact on downstream analysis.\n",
    "    - Many Transform options: scprep.transform.log(), scprep.transform.sqrt() or scprep.transform.arcsinh().\n",
    "    - log-transform doesn’t like zeros, which are incredibly common in single cell datasets. To overcome this, people commonly add a pseudocount to their data, either 1 or a very small value called machine epsilon. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "whole-duration",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C1undiff_TPM</th>\n",
       "      <th>C8undiff_TPM</th>\n",
       "      <th>10undiff_TPM</th>\n",
       "      <th>21undiff_TPM</th>\n",
       "      <th>C1diff_TPM</th>\n",
       "      <th>C8diff_TPM</th>\n",
       "      <th>10diff_TPM</th>\n",
       "      <th>21diff_TPM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gene_symbol</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.637605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.43627</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.558349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.619528</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yR211F11.2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.369757</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53920 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             C1undiff_TPM  C8undiff_TPM  10undiff_TPM  21undiff_TPM  \\\n",
       "gene_symbol                                                           \n",
       "7SK              0.000000           0.0           0.0           0.0   \n",
       "7SK              0.000000           0.0           0.0           0.0   \n",
       "7SK              0.000000           0.0           0.0           0.0   \n",
       "7SK              0.000000           0.0           0.0           0.0   \n",
       "7SK              0.619528           0.0           0.0           0.0   \n",
       "...                   ...           ...           ...           ...   \n",
       "uc_338           0.000000           0.0           0.0           0.0   \n",
       "uc_338           0.000000           0.0           0.0           0.0   \n",
       "uc_338           0.000000           0.0           0.0           0.0   \n",
       "uc_338           0.000000           0.0           0.0           0.0   \n",
       "yR211F11.2       0.000000           0.0           0.0           0.0   \n",
       "\n",
       "             C1diff_TPM  C8diff_TPM  10diff_TPM  21diff_TPM  \n",
       "gene_symbol                                                  \n",
       "7SK             0.00000         0.0         0.0    0.637605  \n",
       "7SK             0.00000         0.0         0.0    0.000000  \n",
       "7SK             0.43627         0.0         0.0    0.558349  \n",
       "7SK             0.00000         0.0         0.0    0.000000  \n",
       "7SK             0.00000         0.0         0.0    0.000000  \n",
       "...                 ...         ...         ...         ...  \n",
       "uc_338          0.00000         0.0         0.0    0.000000  \n",
       "uc_338          0.00000         0.0         0.0    0.000000  \n",
       "uc_338          0.00000         0.0         0.0    0.000000  \n",
       "uc_338          0.00000         0.0         0.0    0.000000  \n",
       "yR211F11.2      0.00000         0.0         0.0    0.369757  \n",
       "\n",
       "[53920 rows x 8 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_data_sq = scprep.transform.sqrt(iPSC_data_log)\n",
    "iPSC_data_sq"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "established-skating",
   "metadata": {},
   "source": [
    "## Imputation and the Netflix Problem (Denoising data using MAGIC):\n",
    "- Imputation covers a set of approaches for taking missing values in a matrix (e.g. a counts matrix of genes by cells) and filling them in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "earned-baltimore",
   "metadata": {},
   "outputs": [],
   "source": [
    "import magic "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "frank-benjamin",
   "metadata": {},
   "source": [
    "# Error: \n",
    "- Remove duplicates to avodi errors in downstream processing \n",
    "- K should have a non-zero diagonal???\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bacterial-trigger",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculating MAGIC...\n",
      "  Running MAGIC on 53920 cells and 8 genes.\n",
      "  Calculating graph and diffusion operator...\n",
      "    Calculating KNN search...\n",
      "    Calculated KNN search in 18.69 seconds.\n",
      "    Calculating affinities...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/.local/lib/python3.8/site-packages/graphtools/graphs.py:287: RuntimeWarning: Detected zero distance between 108247 pairs of samples. Consider removing duplicates to avoid errors in downstream processing.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Calculated affinities in 13.82 seconds.\n",
      "  Calculated graph and diffusion operator in 32.59 seconds.\n",
      "  Calculating imputation...\n",
      "  Calculated imputation in 0.05 seconds.\n",
      "Calculated MAGIC in 32.65 seconds.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/.local/lib/python3.8/site-packages/graphtools/base.py:553: RuntimeWarning: K should have a non-zero diagonal\n",
      "  warnings.warn(\"K should have a non-zero diagonal\", RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C1undiff_TPM</th>\n",
       "      <th>C8undiff_TPM</th>\n",
       "      <th>10undiff_TPM</th>\n",
       "      <th>21undiff_TPM</th>\n",
       "      <th>C1diff_TPM</th>\n",
       "      <th>C8diff_TPM</th>\n",
       "      <th>10diff_TPM</th>\n",
       "      <th>21diff_TPM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gene_symbol</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.641777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.003543</td>\n",
       "      <td>0.000822</td>\n",
       "      <td>0.00015</td>\n",
       "      <td>0.000146</td>\n",
       "      <td>0.491069</td>\n",
       "      <td>0.003509</td>\n",
       "      <td>0.008511</td>\n",
       "      <td>0.582718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.620447</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00095</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yR211F11.2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.368950</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53920 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             C1undiff_TPM  C8undiff_TPM  10undiff_TPM  21undiff_TPM  \\\n",
       "gene_symbol                                                           \n",
       "7SK              0.000000      0.000000       0.00000      0.000000   \n",
       "7SK              0.000000      0.000000       0.00000      0.000000   \n",
       "7SK              0.003543      0.000822       0.00015      0.000146   \n",
       "7SK              0.000000      0.000000       0.00000      0.000000   \n",
       "7SK              0.620447      0.000000       0.00095      0.000000   \n",
       "...                   ...           ...           ...           ...   \n",
       "uc_338           0.000000      0.000000       0.00000      0.000000   \n",
       "uc_338           0.000000      0.000000       0.00000      0.000000   \n",
       "uc_338           0.000000      0.000000       0.00000      0.000000   \n",
       "uc_338           0.000000      0.000000       0.00000      0.000000   \n",
       "yR211F11.2       0.000000      0.000000       0.00000      0.000000   \n",
       "\n",
       "             C1diff_TPM  C8diff_TPM  10diff_TPM  21diff_TPM  \n",
       "gene_symbol                                                  \n",
       "7SK            0.000000    0.000000    0.000000    0.641777  \n",
       "7SK            0.000000    0.000000    0.000000    0.000000  \n",
       "7SK            0.491069    0.003509    0.008511    0.582718  \n",
       "7SK            0.000000    0.000000    0.000000    0.000000  \n",
       "7SK            0.000000    0.000000    0.000000    0.000000  \n",
       "...                 ...         ...         ...         ...  \n",
       "uc_338         0.000000    0.000000    0.000000    0.000000  \n",
       "uc_338         0.000000    0.000000    0.000000    0.000000  \n",
       "uc_338         0.000000    0.000000    0.000000    0.000000  \n",
       "uc_338         0.000000    0.000000    0.000000    0.000000  \n",
       "yR211F11.2     0.000000    0.000000    0.000000    0.368950  \n",
       "\n",
       "[53920 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "magic_operator = magic.MAGIC(knn=3, solver='approximate')\n",
    "iPSC_data_magic = magic_operator.fit_transform(iPSC_data_sq)\n",
    "iPSC_data_magic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bridal-height",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "advanced-messenger",
   "metadata": {},
   "outputs": [],
   "source": [
    "pc_op = PCA()\n",
    "scaler = StandardScaler() \n",
    "iPSC_scaled =scaler.fit_transform(iPSC_data_magic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "interpreted-palmer",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.76371983, -0.75788879, -0.75556331, ..., -0.75680956,\n",
       "        -0.77735538,  0.5198311 ],\n",
       "       [-0.76371983, -0.75788879, -0.75556331, ..., -0.75680956,\n",
       "        -0.77735538, -0.75098591],\n",
       "       [-0.75653972, -0.75621886, -0.75525955, ..., -0.74989417,\n",
       "        -0.76047476,  0.40288601],\n",
       "       ...,\n",
       "       [-0.76371983, -0.75788879, -0.75556331, ..., -0.75680956,\n",
       "        -0.77735538, -0.75098591],\n",
       "       [-0.76371983, -0.75788879, -0.75556331, ..., -0.75680956,\n",
       "        -0.77735538, -0.75098591],\n",
       "       [-0.76371983, -0.75788879, -0.75556331, ..., -0.75680956,\n",
       "        -0.77735538, -0.02040755]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_scaled = scaler.fit_transform(iPSC_data_magic)\n",
    "iPSC_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "surprised-dakota",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Error: Not sure if removing the Transpose was the right thing to do here??"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "nasty-education",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "genes_per_cell = np.sum(iPSC_scaled > 0, axis=0)\n",
    "\n",
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(iPSC_scaled, bins=50)\n",
    "ax.set_xlabel('Genes')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Gene detection across Samples')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "arbitrary-marine",
   "metadata": {},
   "source": [
    "## Visualization (Principle Component Analysis): \n",
    "#### Heatmaps (seaborn):\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "guided-corner",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "talented-rubber",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bridal-marking",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaled =scaler.fit_transform(iPSC_data_magic)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "following-production",
   "metadata": {},
   "source": [
    "# Error— Nothing is working here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "mental-breeding",
   "metadata": {},
   "outputs": [],
   "source": [
    "#cg = sns.clustermap(scaled, cmap='inferno', xticklabels=[], yticklabels=[], standard_scale = 1)\n",
    "#cg.ax_heatmap.set_xlabel('Genes ({})'.format(scaled.shape[1]))\n",
    "#cg.ax_heatmap.set_ylabel('Samples ({})'.format(scaled.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "present-static",
   "metadata": {},
   "source": [
    "### Reduction (PCA)\n",
    "- Doing multiplication or inversion of matrices with 1,000+ dimensions gets very slow and takes up a lot of memory so we typically only store 100-500 PCs and use this for downstream analysis. \n",
    "- PCA gives us a quantification of how much variance we’ve lost by removing some of the final principal components. This means we can figure out how many we need to capture 99.999% of the variance in a dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cooperative-vacation",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, figsize=(5,5))\n",
    "\n",
    "ax.scatter(scaled[:,0], scaled[:,1], s=20)\n",
    "ax.set_xlabel('PC1')\n",
    "ax.set_ylabel('PC2')\n",
    "ax.set_title('T-cell - PCA')\n",
    "\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eight-works",
   "metadata": {},
   "source": [
    "- This graph is ineffective bc PCA reduction of dimensions could not be performed on the dataset using \"data_pcs = scprep.reduce.pca(data_sq, n_pca=100) \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "continuing-sense",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f4fac1483d0>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fit_transform() is used on the training data so that we can scale the training data and also learn the scaling parameters of that data. \n",
    "#Here, the model built by us will learn the mean and variance of the features of the training set. These learned parameters are then used to scale our test data.\n",
    "\n",
    "X = pc_op.fit_transform(iPSC_data_magic.values)\n",
    "X.shape \n",
    "plt.scatter(X[:,0], X[:,1])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "valid-salem",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: dash_core_components in /opt/python/lib/python3.8/site-packages (1.16.0)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install dash_core_components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "senior-compromise",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: dash_bio in /opt/python/lib/python3.8/site-packages (0.6.1)\n",
      "Requirement already satisfied: dash>=1.6.1 in /opt/python/lib/python3.8/site-packages (from dash_bio) (1.20.0)\n",
      "Requirement already satisfied: scikit-learn>=0.20.1 in /opt/python/lib/python3.8/site-packages (from dash_bio) (0.24.0)\n",
      "Requirement already satisfied: pandas in /opt/python/lib/python3.8/site-packages (from dash_bio) (1.2.0)\n",
      "Requirement already satisfied: scipy in /opt/python/lib/python3.8/site-packages (from dash_bio) (1.6.0)\n",
      "Requirement already satisfied: dash-table==4.11.3 in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (4.11.3)\n",
      "Requirement already satisfied: flask-compress in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (1.8.0)\n",
      "Requirement already satisfied: dash-core-components==1.16.0 in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (1.16.0)\n",
      "Requirement already satisfied: dash-html-components==1.1.3 in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (1.1.3)\n",
      "Requirement already satisfied: plotly in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (4.14.3)\n",
      "Requirement already satisfied: future in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (0.18.2)\n",
      "Requirement already satisfied: dash-renderer==1.9.1 in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (1.9.1)\n",
      "Requirement already satisfied: Flask>=1.0.4 in /opt/python/lib/python3.8/site-packages (from dash>=1.6.1->dash_bio) (1.1.2)\n",
      "Requirement already satisfied: click>=5.1 in /opt/python/lib/python3.8/site-packages (from Flask>=1.0.4->dash>=1.6.1->dash_bio) (7.1.2)\n",
      "Requirement already satisfied: Jinja2>=2.10.1 in /opt/python/lib/python3.8/site-packages (from Flask>=1.0.4->dash>=1.6.1->dash_bio) (2.11.2)\n",
      "Requirement already satisfied: itsdangerous>=0.24 in /opt/python/lib/python3.8/site-packages (from Flask>=1.0.4->dash>=1.6.1->dash_bio) (1.1.0)\n",
      "Requirement already satisfied: Werkzeug>=0.15 in /opt/python/lib/python3.8/site-packages (from Flask>=1.0.4->dash>=1.6.1->dash_bio) (1.0.1)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /opt/python/lib/python3.8/site-packages (from Jinja2>=2.10.1->Flask>=1.0.4->dash>=1.6.1->dash_bio) (1.1.1)\n",
      "Requirement already satisfied: numpy>=1.13.3 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.20.1->dash_bio) (1.19.5)\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.20.1->dash_bio) (1.0.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.20.1->dash_bio) (2.1.0)\n",
      "Requirement already satisfied: brotli in /opt/python/lib/python3.8/site-packages (from flask-compress->dash>=1.6.1->dash_bio) (1.0.9)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /opt/python/lib/python3.8/site-packages (from pandas->dash_bio) (2.8.1)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/python/lib/python3.8/site-packages (from pandas->dash_bio) (2020.5)\n",
      "Requirement already satisfied: six>=1.5 in /opt/python/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas->dash_bio) (1.15.0)\n",
      "Requirement already satisfied: retrying>=1.3.3 in /opt/python/lib/python3.8/site-packages (from plotly->dash>=1.6.1->dash_bio) (1.3.3)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install dash_bio "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adjacent-petite",
   "metadata": {},
   "source": [
    "## Volcano Plot "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "administrative-scholarship",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import pandas as pd\n",
    "\n",
    "#import dash_core_components as dcc\n",
    "#import dash_bio as dashbio\n",
    "\n",
    "\n",
    "#df = pd.read_csv(\"https://raw.githubusercontent.com/plotly/dash-bio-docs-files/master/volcano_data1.csv\")\n",
    "\n",
    "#volcanoplot = dashbio.VolcanoPlot(\n",
    "#        dataframe=df,\n",
    "#        effect_size_line_color='#AB63FA',\n",
    "#        genomewideline_color='#EF553B',\n",
    "#        highlight_color='#119DFF',\n",
    "#        col='#2A3F5F'\n",
    "#)\n",
    "#\n",
    "#dcc.Graph(figure=volcanoplot)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "willing-front",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "meaning-dallas",
   "metadata": {},
   "source": [
    "According to the \"iPSC_file_read\", the C1 and C8 (differentiated and undifferentiated groups)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "confirmed-death",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Wild-type(WT/WT) iPSCs</th>\n",
       "      <th>(G13C/WT) iPSCs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gene_symbol</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.641777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.498942</td>\n",
       "      <td>0.591524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.620447</td>\n",
       "      <td>0.000950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uc_338</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yR211F11.2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.368950</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53920 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Wild-type(WT/WT) iPSCs  (G13C/WT) iPSCs\n",
       "gene_symbol                                         \n",
       "7SK                        0.000000         0.641777\n",
       "7SK                        0.000000         0.000000\n",
       "7SK                        0.498942         0.591524\n",
       "7SK                        0.000000         0.000000\n",
       "7SK                        0.620447         0.000950\n",
       "...                             ...              ...\n",
       "uc_338                     0.000000         0.000000\n",
       "uc_338                     0.000000         0.000000\n",
       "uc_338                     0.000000         0.000000\n",
       "uc_338                     0.000000         0.000000\n",
       "yR211F11.2                 0.000000         0.368950\n",
       "\n",
       "[53920 rows x 2 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_combined_Mut_Wild = iPSC_data_magic.drop(['C1undiff_TPM','C8undiff_TPM', '10undiff_TPM', '21undiff_TPM', 'C1diff_TPM', 'C8diff_TPM', 'C8diff_TPM', '10diff_TPM', '21diff_TPM'], axis =1)  \n",
    "iPSC_combined_Mut_Wild"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ranking-romantic",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "ufunc 'log' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-63-108e282576df>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m#print(remove_null.dtypes)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mmut_wild_log2f\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Log2FC'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'convert_dt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: ufunc 'log' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
     ]
    }
   ],
   "source": [
    "iPSC_data_magic['Wild-type(WT/WT) iPSCs'] = iPSC_data_magic['C1undiff_TPM'] + iPSC_data_magic['C8undiff_TPM'] + iPSC_data_magic['C1diff_TPM'] + iPSC_data_magic['C8diff_TPM']\n",
    "iPSC_data_magic['(G13C/WT) iPSCs'] = iPSC_data_magic['10undiff_TPM'] + iPSC_data_magic['21undiff_TPM'] + iPSC_data_magic['10diff_TPM'] + iPSC_data_magic['21diff_TPM']\n",
    "divided_columns = iPSC_data_magic['(G13C/WT) iPSCs']/ iPSC_data_magic['Wild-type(WT/WT) iPSCs']\n",
    "\n",
    "#This should remove all NaN and -inf values\n",
    "remove_null = divided_columns[~divided_columns.isin([np.nan, np.inf, -np.inf])]\n",
    "convert_dt = pd.to_numeric(remove_null)\n",
    "\n",
    "#print(remove_null.dtypes)\n",
    "\n",
    "mut_wild_log2f['Log2FC'] = np.log('convert_dt')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "double-coffee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gene_symbol\n",
       "7SK           0.641777\n",
       "7SK           0.000000\n",
       "7SK           0.591524\n",
       "7SK           0.000000\n",
       "7SK           0.000950\n",
       "                ...   \n",
       "uc_338        0.000000\n",
       "uc_338        0.000000\n",
       "uc_338        0.000000\n",
       "uc_338        0.000000\n",
       "yR211F11.2    0.368950\n",
       "Name: (G13C/WT) iPSCs, Length: 53920, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_data_magic['(G13C/WT) iPSCs'] = iPSC_data_magic['10undiff_TPM'] + iPSC_data_magic['21undiff_TPM'] + iPSC_data_magic['10diff_TPM'] + iPSC_data_magic['21diff_TPM']\n",
    "iPSC_data_magic['(G13C/WT) iPSCs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "played-romania",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
