{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "sitting-ambassador",
   "metadata": {},
   "source": [
    "## Single-Cell Analysis (1):\n",
    "- Cell type: Induced Pluripotent stem cell (iPSC)\n",
    "- Title: \"Characterization of gene expression patterns among human iPS cell-derived cardiomyocytes, iPS cells, fetal human heart tissue and adult human heart tissue\"\n",
    "- Data: Gene ID (gene expression patterns of human iPS cell-derived cardiomyocytes, adult human heart tissues, fetal human heart tissue and iPS cells) along with corresponding cell counts of iPS cell-derived cardiomyocytes across 10 samples."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "vanilla-architecture",
   "metadata": {},
   "source": [
    "### Some important Links: \n",
    "- Krish Lab (Alt. tutorial): https://krishnaswamylab.github.io/tutorial/intro_to_linalg/\n",
    "\n",
    "### Libraries:\n",
    "- Screp:https://scprep.readthedocs.io/en/stable/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "external-lingerie",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: scprep in /root/.local/lib/python3.8/site-packages (1.1.0)\n",
      "Requirement already satisfied: packaging in /opt/python/lib/python3.8/site-packages (from scprep) (20.8)\n",
      "Requirement already satisfied: scipy>=0.18.1 in /opt/python/lib/python3.8/site-packages (from scprep) (1.6.0)\n",
      "Requirement already satisfied: scikit-learn>=0.19.1 in /opt/python/lib/python3.8/site-packages (from scprep) (0.24.0)\n",
      "Requirement already satisfied: numpy>=1.12.0 in /opt/python/lib/python3.8/site-packages (from scprep) (1.19.5)\n",
      "Requirement already satisfied: pandas>=0.25 in /opt/python/lib/python3.8/site-packages (from scprep) (1.2.0)\n",
      "Requirement already satisfied: decorator>=4.3.0 in /opt/python/lib/python3.8/site-packages (from scprep) (4.4.2)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/python/lib/python3.8/site-packages (from pandas>=0.25->scprep) (2020.5)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /opt/python/lib/python3.8/site-packages (from pandas>=0.25->scprep) (2.8.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/python/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas>=0.25->scprep) (1.15.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.19.1->scprep) (2.1.0)\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.19.1->scprep) (1.0.0)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in /opt/python/lib/python3.8/site-packages (from packaging->scprep) (2.4.7)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --user scprep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "pharmaceutical-cemetery",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in /opt/python/lib/python3.8/site-packages (3.3.3)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/python/lib/python3.8/site-packages (from matplotlib) (2.4.7)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/python/lib/python3.8/site-packages (from matplotlib) (2.8.1)\n",
      "Requirement already satisfied: numpy>=1.15 in /opt/python/lib/python3.8/site-packages (from matplotlib) (1.19.5)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/python/lib/python3.8/site-packages (from matplotlib) (8.1.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/python/lib/python3.8/site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/python/lib/python3.8/site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: six in /opt/python/lib/python3.8/site-packages (from cycler>=0.10->matplotlib) (1.15.0)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "explicit-broadcasting",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scprep\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "seven-america",
   "metadata": {},
   "source": [
    "## iPSC Data analysis:\n",
    "- https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE154580\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "collective-amsterdam",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEC24B-AS1</th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A1CF</th>\n",
       "      <th>GGACT</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2ML1</th>\n",
       "      <th>A2MP1</th>\n",
       "      <th>A4GALT</th>\n",
       "      <th>A4GNT</th>\n",
       "      <th>AAAS</th>\n",
       "      <th>AACS</th>\n",
       "      <th>AADAC</th>\n",
       "      <th>AADACL2</th>\n",
       "      <th>AADACL3</th>\n",
       "      <th>AADACL4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sample 1</th>\n",
       "      <td>1.152</td>\n",
       "      <td>0.576</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>62.447</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>212.046</td>\n",
       "      <td>0.000</td>\n",
       "      <td>50.995</td>\n",
       "      <td>34.429</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 2</th>\n",
       "      <td>0.901</td>\n",
       "      <td>1.276</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>70.575</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>219.383</td>\n",
       "      <td>0.000</td>\n",
       "      <td>49.027</td>\n",
       "      <td>41.519</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 3</th>\n",
       "      <td>0.348</td>\n",
       "      <td>0.765</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>99.274</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.139</td>\n",
       "      <td>229.206</td>\n",
       "      <td>0.000</td>\n",
       "      <td>45.883</td>\n",
       "      <td>38.305</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 4</th>\n",
       "      <td>1.404</td>\n",
       "      <td>0.468</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.281</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>13.014</td>\n",
       "      <td>0.000</td>\n",
       "      <td>61.325</td>\n",
       "      <td>72.748</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.094</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 5</th>\n",
       "      <td>1.282</td>\n",
       "      <td>0.275</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>11.449</td>\n",
       "      <td>0.000</td>\n",
       "      <td>67.592</td>\n",
       "      <td>71.256</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.641</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 6</th>\n",
       "      <td>0.736</td>\n",
       "      <td>0.401</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.201</td>\n",
       "      <td>0.334</td>\n",
       "      <td>0.067</td>\n",
       "      <td>0.067</td>\n",
       "      <td>11.974</td>\n",
       "      <td>0.000</td>\n",
       "      <td>63.014</td>\n",
       "      <td>77.463</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.067</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 7</th>\n",
       "      <td>1.083</td>\n",
       "      <td>0.696</td>\n",
       "      <td>0.464</td>\n",
       "      <td>0.310</td>\n",
       "      <td>161.897</td>\n",
       "      <td>13.233</td>\n",
       "      <td>0.077</td>\n",
       "      <td>26.157</td>\n",
       "      <td>0.929</td>\n",
       "      <td>29.175</td>\n",
       "      <td>31.497</td>\n",
       "      <td>14.704</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 8</th>\n",
       "      <td>0.170</td>\n",
       "      <td>0.255</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>770.164</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.170</td>\n",
       "      <td>71.176</td>\n",
       "      <td>0.000</td>\n",
       "      <td>18.560</td>\n",
       "      <td>18.390</td>\n",
       "      <td>0.085</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 9</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.213</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.213</td>\n",
       "      <td>372.533</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.492</td>\n",
       "      <td>24.021</td>\n",
       "      <td>0.000</td>\n",
       "      <td>15.350</td>\n",
       "      <td>45.909</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 10</th>\n",
       "      <td>0.152</td>\n",
       "      <td>0.229</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.229</td>\n",
       "      <td>516.937</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.610</td>\n",
       "      <td>98.907</td>\n",
       "      <td>0.000</td>\n",
       "      <td>20.955</td>\n",
       "      <td>23.698</td>\n",
       "      <td>2.134</td>\n",
       "      <td>0.152</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           SEC24B-AS1   A1BG   A1CF  GGACT      A2M   A2ML1  A2MP1   A4GALT  \\\n",
       "Sample 1        1.152  0.576  0.000  0.000   62.447   0.000  0.000  212.046   \n",
       "Sample 2        0.901  1.276  0.000  0.000   70.575   0.000  0.000  219.383   \n",
       "Sample 3        0.348  0.765  0.000  0.000   99.274   0.000  0.139  229.206   \n",
       "Sample 4        1.404  0.468  0.000  0.281    0.375   0.000  0.000   13.014   \n",
       "Sample 5        1.282  0.275  0.000  0.183    0.183   0.000  0.000   11.449   \n",
       "Sample 6        0.736  0.401  0.000  0.201    0.334   0.067  0.067   11.974   \n",
       "Sample 7        1.083  0.696  0.464  0.310  161.897  13.233  0.077   26.157   \n",
       "Sample 8        0.170  0.255  0.000  0.000  770.164   0.000  0.170   71.176   \n",
       "Sample 9        0.000  0.213  0.000  0.213  372.533   0.000  1.492   24.021   \n",
       "Sample 10       0.152  0.229  0.000  0.229  516.937   0.000  0.610   98.907   \n",
       "\n",
       "           A4GNT    AAAS    AACS   AADAC  AADACL2  AADACL3  AADACL4  \n",
       "Sample 1   0.000  50.995  34.429   0.000    0.000    0.000    0.000  \n",
       "Sample 2   0.000  49.027  41.519   0.000    0.000    0.000    0.000  \n",
       "Sample 3   0.000  45.883  38.305   0.000    0.000    0.000    0.000  \n",
       "Sample 4   0.000  61.325  72.748   0.000    0.000    0.094    0.000  \n",
       "Sample 5   0.000  67.592  71.256   0.000    0.000    0.641    0.000  \n",
       "Sample 6   0.000  63.014  77.463   0.000    0.000    0.067    0.067  \n",
       "Sample 7   0.929  29.175  31.497  14.704    0.077    0.000    0.000  \n",
       "Sample 8   0.000  18.560  18.390   0.085    0.000    0.000    0.000  \n",
       "Sample 9   0.000  15.350  45.909   0.000    0.000    0.000    0.142  \n",
       "Sample 10  0.000  20.955  23.698   2.134    0.152    0.000    0.000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_file_read = scprep.io.load_csv('Desktop/Projects/School/iPSC/GSE154580_rpm.bcmatrix copy.csv', delimiter='\\t', gene_names=True, sparse=True)\n",
    "iPSC_file_read.head(15).T\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "straight-admission",
   "metadata": {},
   "source": [
    "### Merging Batches: \n",
    "- ...if you have multiple samples from the same experiment that you want to compare."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "answering-consolidation",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Individual column samples:\n",
    "cs1 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 1')\n",
    "cs2 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 2')\n",
    "cs3 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 3')\n",
    "cs4 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 4')\n",
    "cs5 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 5')\n",
    "cs6 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 6')\n",
    "cs7 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 7')\n",
    "cs8 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 8')\n",
    "cs9 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 9')\n",
    "cs10 = scprep.select.select_cols(iPSC_file_read, exact_word='Sample 10')\n",
    "\n",
    "#^^^^\n",
    "#May not even be necessary since all the samples are contained within one file\n",
    "\n",
    "# Concatenating data matrices\n",
    "#EBT_counts, sample_labels = scprep.utils.combine_batches(\n",
    "#    data=[T1, T2, T3, T4, T5],\n",
    "#    batch_labels=[\"Day0-3\", \"Day6-9\", \"Day12-15\", \"Day18-21\", \"Day24-27\"],\n",
    "#    append_to_cell_names=True\n",
    "#)\n",
    "\n",
    "# remove objects from memory\n",
    "#del T1, T2, T3, T4, T5  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "later-semester",
   "metadata": {},
   "source": [
    "### Preprocessing/ Loading/ Filtering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "restricted-festival",
   "metadata": {},
   "source": [
    "sum of expression values for each cell sums to 1 then returns normalized matrix to the metric space using median UMI count per cell effectively scaling all cells as if they were sampled evenly.#### Normalization\n",
    "- align the scales of gene expression across cells that have different # of UMIs / cell.\n",
    "- The sum of expression values for each cell sums to 1 then returns normalized matrix to the metric space using median UMI count per cell effectively scaling all cells as if they were sampled evenly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "anticipated-religious",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/.local/lib/python3.8/site-packages/scprep/select.py:369: UserWarning: No selection conditions provided. Returning all columns.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEC24B-AS1</th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A1CF</th>\n",
       "      <th>GGACT</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2ML1</th>\n",
       "      <th>A2MP1</th>\n",
       "      <th>A4GALT</th>\n",
       "      <th>A4GNT</th>\n",
       "      <th>AAAS</th>\n",
       "      <th>...</th>\n",
       "      <th>ZNF826P</th>\n",
       "      <th>ZNF876P</th>\n",
       "      <th>ZNF890P</th>\n",
       "      <th>ZNRF2P2</th>\n",
       "      <th>DPY19L2P3</th>\n",
       "      <th>HYDIN</th>\n",
       "      <th>PCDHB18</th>\n",
       "      <th>RNF213</th>\n",
       "      <th>SFMBT1</th>\n",
       "      <th>ERCC-00112</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sample 1</th>\n",
       "      <td>1.152</td>\n",
       "      <td>0.576</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>62.447</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>212.046</td>\n",
       "      <td>0.000</td>\n",
       "      <td>50.995</td>\n",
       "      <td>...</td>\n",
       "      <td>2.737</td>\n",
       "      <td>0.216</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.216</td>\n",
       "      <td>0.504</td>\n",
       "      <td>0.504</td>\n",
       "      <td>0.072</td>\n",
       "      <td>28.306</td>\n",
       "      <td>15.702</td>\n",
       "      <td>0.144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 2</th>\n",
       "      <td>0.901</td>\n",
       "      <td>1.276</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>70.575</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>219.383</td>\n",
       "      <td>0.000</td>\n",
       "      <td>49.027</td>\n",
       "      <td>...</td>\n",
       "      <td>2.628</td>\n",
       "      <td>0.826</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.075</td>\n",
       "      <td>0.450</td>\n",
       "      <td>0.526</td>\n",
       "      <td>0.450</td>\n",
       "      <td>34.687</td>\n",
       "      <td>14.265</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 3</th>\n",
       "      <td>0.348</td>\n",
       "      <td>0.765</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>99.274</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.139</td>\n",
       "      <td>229.206</td>\n",
       "      <td>0.000</td>\n",
       "      <td>45.883</td>\n",
       "      <td>...</td>\n",
       "      <td>1.182</td>\n",
       "      <td>0.139</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.417</td>\n",
       "      <td>0.278</td>\n",
       "      <td>0.626</td>\n",
       "      <td>0.278</td>\n",
       "      <td>28.503</td>\n",
       "      <td>11.262</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 4</th>\n",
       "      <td>1.404</td>\n",
       "      <td>0.468</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.281</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>13.014</td>\n",
       "      <td>0.000</td>\n",
       "      <td>61.325</td>\n",
       "      <td>...</td>\n",
       "      <td>19.568</td>\n",
       "      <td>11.703</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.187</td>\n",
       "      <td>0.000</td>\n",
       "      <td>4.494</td>\n",
       "      <td>0.187</td>\n",
       "      <td>32.863</td>\n",
       "      <td>21.815</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 5</th>\n",
       "      <td>1.282</td>\n",
       "      <td>0.275</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>11.449</td>\n",
       "      <td>0.000</td>\n",
       "      <td>67.592</td>\n",
       "      <td>...</td>\n",
       "      <td>11.906</td>\n",
       "      <td>8.701</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>4.488</td>\n",
       "      <td>0.183</td>\n",
       "      <td>37.643</td>\n",
       "      <td>13.921</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 6</th>\n",
       "      <td>0.736</td>\n",
       "      <td>0.401</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.201</td>\n",
       "      <td>0.334</td>\n",
       "      <td>0.067</td>\n",
       "      <td>0.067</td>\n",
       "      <td>11.974</td>\n",
       "      <td>0.000</td>\n",
       "      <td>63.014</td>\n",
       "      <td>...</td>\n",
       "      <td>12.108</td>\n",
       "      <td>6.957</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>5.619</td>\n",
       "      <td>0.067</td>\n",
       "      <td>39.266</td>\n",
       "      <td>16.523</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 7</th>\n",
       "      <td>1.083</td>\n",
       "      <td>0.696</td>\n",
       "      <td>0.464</td>\n",
       "      <td>0.310</td>\n",
       "      <td>161.897</td>\n",
       "      <td>13.233</td>\n",
       "      <td>0.077</td>\n",
       "      <td>26.157</td>\n",
       "      <td>0.929</td>\n",
       "      <td>29.175</td>\n",
       "      <td>...</td>\n",
       "      <td>4.411</td>\n",
       "      <td>2.244</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.232</td>\n",
       "      <td>24.532</td>\n",
       "      <td>1.857</td>\n",
       "      <td>88.997</td>\n",
       "      <td>19.038</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 8</th>\n",
       "      <td>0.170</td>\n",
       "      <td>0.255</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>770.164</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.170</td>\n",
       "      <td>71.176</td>\n",
       "      <td>0.000</td>\n",
       "      <td>18.560</td>\n",
       "      <td>...</td>\n",
       "      <td>0.511</td>\n",
       "      <td>0.085</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.170</td>\n",
       "      <td>7.833</td>\n",
       "      <td>0.255</td>\n",
       "      <td>38.057</td>\n",
       "      <td>19.922</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 9</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.213</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.213</td>\n",
       "      <td>372.533</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.492</td>\n",
       "      <td>24.021</td>\n",
       "      <td>0.000</td>\n",
       "      <td>15.350</td>\n",
       "      <td>...</td>\n",
       "      <td>0.071</td>\n",
       "      <td>0.284</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.071</td>\n",
       "      <td>0.569</td>\n",
       "      <td>23.950</td>\n",
       "      <td>0.426</td>\n",
       "      <td>33.330</td>\n",
       "      <td>14.284</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 10</th>\n",
       "      <td>0.152</td>\n",
       "      <td>0.229</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.229</td>\n",
       "      <td>516.937</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.610</td>\n",
       "      <td>98.907</td>\n",
       "      <td>0.000</td>\n",
       "      <td>20.955</td>\n",
       "      <td>...</td>\n",
       "      <td>0.152</td>\n",
       "      <td>0.229</td>\n",
       "      <td>0.076</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.659</td>\n",
       "      <td>0.305</td>\n",
       "      <td>43.967</td>\n",
       "      <td>14.859</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 19556 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           SEC24B-AS1   A1BG   A1CF  GGACT      A2M   A2ML1  A2MP1   A4GALT  \\\n",
       "Sample 1        1.152  0.576  0.000  0.000   62.447   0.000  0.000  212.046   \n",
       "Sample 2        0.901  1.276  0.000  0.000   70.575   0.000  0.000  219.383   \n",
       "Sample 3        0.348  0.765  0.000  0.000   99.274   0.000  0.139  229.206   \n",
       "Sample 4        1.404  0.468  0.000  0.281    0.375   0.000  0.000   13.014   \n",
       "Sample 5        1.282  0.275  0.000  0.183    0.183   0.000  0.000   11.449   \n",
       "Sample 6        0.736  0.401  0.000  0.201    0.334   0.067  0.067   11.974   \n",
       "Sample 7        1.083  0.696  0.464  0.310  161.897  13.233  0.077   26.157   \n",
       "Sample 8        0.170  0.255  0.000  0.000  770.164   0.000  0.170   71.176   \n",
       "Sample 9        0.000  0.213  0.000  0.213  372.533   0.000  1.492   24.021   \n",
       "Sample 10       0.152  0.229  0.000  0.229  516.937   0.000  0.610   98.907   \n",
       "\n",
       "           A4GNT    AAAS  ...  ZNF826P  ZNF876P  ZNF890P  ZNRF2P2  DPY19L2P3  \\\n",
       "Sample 1   0.000  50.995  ...    2.737    0.216    0.000    0.216      0.504   \n",
       "Sample 2   0.000  49.027  ...    2.628    0.826    0.000    0.075      0.450   \n",
       "Sample 3   0.000  45.883  ...    1.182    0.139    0.000    0.417      0.278   \n",
       "Sample 4   0.000  61.325  ...   19.568   11.703    0.000    0.187      0.000   \n",
       "Sample 5   0.000  67.592  ...   11.906    8.701    0.000    0.000      0.000   \n",
       "Sample 6   0.000  63.014  ...   12.108    6.957    0.000    0.000      0.000   \n",
       "Sample 7   0.929  29.175  ...    4.411    2.244    0.000    0.077      0.232   \n",
       "Sample 8   0.000  18.560  ...    0.511    0.085    0.000    0.000      0.170   \n",
       "Sample 9   0.000  15.350  ...    0.071    0.284    0.000    0.071      0.569   \n",
       "Sample 10  0.000  20.955  ...    0.152    0.229    0.076    0.000      0.076   \n",
       "\n",
       "            HYDIN  PCDHB18  RNF213  SFMBT1  ERCC-00112  \n",
       "Sample 1    0.504    0.072  28.306  15.702       0.144  \n",
       "Sample 2    0.526    0.450  34.687  14.265       0.000  \n",
       "Sample 3    0.626    0.278  28.503  11.262       0.000  \n",
       "Sample 4    4.494    0.187  32.863  21.815       0.000  \n",
       "Sample 5    4.488    0.183  37.643  13.921       0.000  \n",
       "Sample 6    5.619    0.067  39.266  16.523       0.000  \n",
       "Sample 7   24.532    1.857  88.997  19.038       0.000  \n",
       "Sample 8    7.833    0.255  38.057  19.922       0.000  \n",
       "Sample 9   23.950    0.426  33.330  14.284       0.000  \n",
       "Sample 10  11.659    0.305  43.967  14.859       0.000  \n",
       "\n",
       "[10 rows x 19556 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#iPSC_data = scprep.filter.filter_library_size(iPSC_file_read, cutoff=0.01, keep_cells='above')\n",
    "iPSC_data = scprep.filter.filter_gene_set_expression(iPSC_file_read, cutoff=0.01, library_size_normalize=True, keep_cells='above').T\n",
    "iPSC_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "relative-lesbian",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/.local/lib/python3.8/site-packages/scprep/select.py:369: UserWarning: No selection conditions provided. Returning all columns.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample 1</th>\n",
       "      <th>Sample 2</th>\n",
       "      <th>Sample 3</th>\n",
       "      <th>Sample 4</th>\n",
       "      <th>Sample 5</th>\n",
       "      <th>Sample 6</th>\n",
       "      <th>Sample 7</th>\n",
       "      <th>Sample 8</th>\n",
       "      <th>Sample 9</th>\n",
       "      <th>Sample 10</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gene</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SEC24B-AS1</th>\n",
       "      <td>1.152</td>\n",
       "      <td>0.901</td>\n",
       "      <td>0.348</td>\n",
       "      <td>1.404</td>\n",
       "      <td>1.282</td>\n",
       "      <td>0.736</td>\n",
       "      <td>1.083</td>\n",
       "      <td>0.170</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1BG</th>\n",
       "      <td>0.576</td>\n",
       "      <td>1.276</td>\n",
       "      <td>0.765</td>\n",
       "      <td>0.468</td>\n",
       "      <td>0.275</td>\n",
       "      <td>0.401</td>\n",
       "      <td>0.696</td>\n",
       "      <td>0.255</td>\n",
       "      <td>0.213</td>\n",
       "      <td>0.229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1CF</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.464</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GGACT</th>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.281</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.201</td>\n",
       "      <td>0.310</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.213</td>\n",
       "      <td>0.229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A2M</th>\n",
       "      <td>62.447</td>\n",
       "      <td>70.575</td>\n",
       "      <td>99.274</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.334</td>\n",
       "      <td>161.897</td>\n",
       "      <td>770.164</td>\n",
       "      <td>372.533</td>\n",
       "      <td>516.937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HYDIN</th>\n",
       "      <td>0.504</td>\n",
       "      <td>0.526</td>\n",
       "      <td>0.626</td>\n",
       "      <td>4.494</td>\n",
       "      <td>4.488</td>\n",
       "      <td>5.619</td>\n",
       "      <td>24.532</td>\n",
       "      <td>7.833</td>\n",
       "      <td>23.950</td>\n",
       "      <td>11.659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PCDHB18</th>\n",
       "      <td>0.072</td>\n",
       "      <td>0.450</td>\n",
       "      <td>0.278</td>\n",
       "      <td>0.187</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.067</td>\n",
       "      <td>1.857</td>\n",
       "      <td>0.255</td>\n",
       "      <td>0.426</td>\n",
       "      <td>0.305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RNF213</th>\n",
       "      <td>28.306</td>\n",
       "      <td>34.687</td>\n",
       "      <td>28.503</td>\n",
       "      <td>32.863</td>\n",
       "      <td>37.643</td>\n",
       "      <td>39.266</td>\n",
       "      <td>88.997</td>\n",
       "      <td>38.057</td>\n",
       "      <td>33.330</td>\n",
       "      <td>43.967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SFMBT1</th>\n",
       "      <td>15.702</td>\n",
       "      <td>14.265</td>\n",
       "      <td>11.262</td>\n",
       "      <td>21.815</td>\n",
       "      <td>13.921</td>\n",
       "      <td>16.523</td>\n",
       "      <td>19.038</td>\n",
       "      <td>19.922</td>\n",
       "      <td>14.284</td>\n",
       "      <td>14.859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ERCC-00112</th>\n",
       "      <td>0.144</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19556 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Sample 1  Sample 2  Sample 3  Sample 4  Sample 5  Sample 6  \\\n",
       "Gene                                                                     \n",
       "SEC24B-AS1     1.152     0.901     0.348     1.404     1.282     0.736   \n",
       "A1BG           0.576     1.276     0.765     0.468     0.275     0.401   \n",
       "A1CF           0.000     0.000     0.000     0.000     0.000     0.000   \n",
       "GGACT          0.000     0.000     0.000     0.281     0.183     0.201   \n",
       "A2M           62.447    70.575    99.274     0.375     0.183     0.334   \n",
       "...              ...       ...       ...       ...       ...       ...   \n",
       "HYDIN          0.504     0.526     0.626     4.494     4.488     5.619   \n",
       "PCDHB18        0.072     0.450     0.278     0.187     0.183     0.067   \n",
       "RNF213        28.306    34.687    28.503    32.863    37.643    39.266   \n",
       "SFMBT1        15.702    14.265    11.262    21.815    13.921    16.523   \n",
       "ERCC-00112     0.144     0.000     0.000     0.000     0.000     0.000   \n",
       "\n",
       "            Sample 7  Sample 8  Sample 9  Sample 10  \n",
       "Gene                                                 \n",
       "SEC24B-AS1     1.083     0.170     0.000      0.152  \n",
       "A1BG           0.696     0.255     0.213      0.229  \n",
       "A1CF           0.464     0.000     0.000      0.000  \n",
       "GGACT          0.310     0.000     0.213      0.229  \n",
       "A2M          161.897   770.164   372.533    516.937  \n",
       "...              ...       ...       ...        ...  \n",
       "HYDIN         24.532     7.833    23.950     11.659  \n",
       "PCDHB18        1.857     0.255     0.426      0.305  \n",
       "RNF213        88.997    38.057    33.330     43.967  \n",
       "SFMBT1        19.038    19.922    14.284     14.859  \n",
       "ERCC-00112     0.000     0.000     0.000      0.000  \n",
       "\n",
       "[19556 rows x 10 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_data_T = scprep.filter.filter_gene_set_expression(iPSC_file_read, cutoff=0.01, library_size_normalize=True, keep_cells='above')\n",
    "iPSC_data_T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "precise-temperature",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "genes_per_cell = np.sum(iPSC_data > 0)\n",
    "\n",
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(genes_per_cell, bins=50)\n",
    "ax.set_xlabel('Samples')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Count Depths across Samples')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "certified-fiber",
   "metadata": {},
   "source": [
    "## Figure A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fifth-wonder",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjgAAAI4CAYAAABndZP2AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAAj2klEQVR4nO3debhtdV0/8PeHQXDEAZJk8CIacO1a4RU1G8gRFMXMAtJMIxHLhqf66XX41ann59NIpkU/wvQRc0CkMkp6yLjgUCqgkoI38ooDFwdwQJx+Ivr9/bHW0c3xDhvu2exzvvf1ep71nLW+a/rs9T337Pddw97VWgsAQE92m3cBAADLTcABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOdK6q1lRVq6o9VkAtX6mq+827DpKq+nhVPXredcCsCDiwTKrqxKp6b1V9taquG8d/papq3rVNq6qeWVXvWqZtXVxVvzzZ1lq7S2vt6uXY/mpVVS+qqo+NYW9LVb1p3jVBjwQcWAZV9dtJXp7kT5Psn+TeSU5N8ogkd5hjaUzp9jjDVVW/mOQXkjy6tXaXJOuTXDjr/cKuSMCBnVRV+yT5gyS/0lo7t7X25Tb4QGvtaa21b4zL7VVVf1ZVn6yqz1bVGVV1x3He0eP/5n97PPvz6ap61sQ+trnuVurZfVz2c1V1dZInLK23ql417uPaqvo/4zpHJDkjycPHsws3TLPvqjq+qi6vqhur6qNVdUxVvTTJjyf5q3FbfzUu26rq/hN1vLaqrq+qT1TVS6pqt3HeM6vqXeN+vzie8Th2O32wYdz3l6vqw1X100vmP7uqNk3MP3Js/3hVvaCqPpjkq1W1R1U9qaqurKobxrNQR0xs5wXjMftyVV1VVY8a24+qqsvGY/DZqvrzbZT6kCQXtNY+miSttc+01s6c2P6zJuq8uqqeMzFv8Xfk+RO/I0+uqsdX1f9U1Req6kUTyy9U1blV9aZxe++vqh/axvHbbeIYfr6qzqmqe47z9q6q143tN1TVpVV17231BawYrTWDwbATQ5JjktycZI8dLPeyJOcluWeSuyb55yR/OM47etzGHyTZM8njk3wtyT12tO5W9nNqkv9OctC4/EVJ2mJ9Sf4xyd8kuXOS70tySZLnjPOemeRdt6Luo5J8KcljMvyH6YAkh4/zLk7yy0u21ZLcfxx/bZJ/Gre5Jsn/JDl5oo5vJnl2kt2TPDfJp5LUNl7zzya5z1jDCUm+muT7J+ZdmyFcVJL7J7nvOO/jSS4fj9Udk/zAuO5jxn54fpLNGc7CHZbkmiT3Gdddk+TQcfzdSX5hHL9Lkodto86nJ/lCkv+V4ezN7kvmPyHJoWOdPzn+Dhy55Hfkd8fanp3k+iRvGI/hA5N8Pckh4/IL4zF86rj87yT5WJI9J177o8fx30jyniQHJtkrw+/HG8d5zxn7/E5jXzw4yd3m/e/OYNjRMPcCDIbVPoxvWp9Z0vafSW4Y33B+YnzD+uriG+K4zMOTfGwcP3pcdo+J+dclediO1t1KPRuTnDox/diMASfDpbNvJLnjxPyTklw0jj8zEwFnirr/JsnLtlHHxdlGwBnfKG9KsnZi3nOSXDxRx+aJeXca191/yj65PMnx4/gFSX5jG8t9PMkvTUz/7yTnTEzvliEcHT3WfV2SRy+GhInl3pHk95PsO0VtT0vy7+Nx/XySF2xn2bcs1j7xO7L7OH3X8Zg8dGL59yV58ji+kOQ9S17Lp5P8+MRrXww4m5I8amLZ788QjvZI8ksZfp8fNO9/awbDrRnm/lQFdODzSfatqj1aazcnSWvtR5OkqrZkeGPZL8Ob9Pvqu/ccV4Y3+u9sZ3H90dcynA2YZt1J98lwpmHRJybG75vhf/OfntjWbkuWn7SjfR+U5PxtrLs9+451TNb2iQxngBZ9ZnGktfa1cf932drGquoZSX4rw1mVxeX2najxo9upZfK132eyptbat6vqmiQHtNYurqrfzBAcHlhVFyT5rdbap5KcnOHs239X1ceS/H5r7V+2trPW2uuTvL6q9kzy5HH88tbaBeNluN/LcCZptwzH/kMTq3++tfatcfzr48/PTsz/em55jL7z2sbXsmV8jUvdN8k/VtW3J9q+lSEQ/12GY3h2Vd09yeuSvLi19s2tvT5YKdyDAzvv3RnOihy/nWU+l+HN54GttbuPwz5tuNF0R27tup/O8Ia06OCJ8WvGWved2NbdWmsPHOe3W7nvazJcUtmapdtaut1vZnhjnazz2u2ss1VVdd8kr0zyvCT3aq3dPckVGYLYjmpcWuenJmuqIVUdtFhXa+0NrbUfG5dpSf54bP9Ia+2kDJf8/jjJuVV15+3V3Vr7ZmvtzUk+mOQHq2qvJH+f5M+S3Ht8HedPvI7b4ju/B+P9TQeOr3Gpa5IcO9HHd2+t7d1au3as8/dba2uT/GiS45I8YydqgtuFgAM7qbV2Q4bLE39dVU+tqruON23+cIb7XNJa+3aGN+GXVdX3JUlVHVBVj5ti+7d23XOS/HpVHVhV90iyYWJbn07yb0lOq6q7jXUeWlU/OS7y2SQHVtUdptz3q5I8q6oeNW7rgKo6fGJbW/3Mm/EsxDlJXjoer/tmOAPzuh0dj624c4awcf1Y37OS/ODE/L9N8jtV9eAa3H/c39ack+QJ4+vZM8lvZwiE/1lVh1XVI8cg8v8yBL9vj/t8elXtNx6vG8ZtfXvpxmu4efoJE78jx2a4d+a9Ge7z2Wt8HTeP8x57G47HpAdX1VNqeELsN8fX8p6tLHdGhr6471jnflV1/Dj+U1W1rqp2T3JjhmD6Pa8NVhoBB5ZBa+1PMrxBPz/DG/tnM9yf8oIM9y9kHN+c5D1VdWOG+zAOm3IXt2bdV2a47+S/krw/yT8smf+MDG+mH07yxSTnZrjnIhnu37kyyWeq6nM72ndr7ZIkz8pwI/KXkrw93z0D8vIkT63hKahXbKXOX8twH8rVSd6V4WbZV+/oQCzVWvtwktMynEn7bJJ1Sf5jYv6bk7x03P6XM9zXcs9tbOuqDPdU/WWGs0xPTPLE1tpNGcLHH43tn8lwtuaF46rHJLmyqr4yvu4TW2tfz/e6McmLknwyQxD6kyTPba29q7X25SS/niFkfTHJz2e4uXtn/FOGm66/mOHx9Kds49LSy8d9/VtVfTlDCHroOG//DL8jN2a4V+ftGS5bwYpWrW3vLDIAq1FVLWR4Yu3p864F5sEZHACgOwIOANAdl6gAgO44gwMAdGdVf9Dfvvvu29asWTPvMgCAOXnf+973udbafkvbV3XAWbNmTS677LJ5lwEAzElVfWJr7S5RAQDdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoADAHRHwNmGNRvemizsk3Vnrcvpp27MaSccly0b3pkLNx6a/S+6fN7lAQDbIeAAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdGdFBZyqunNVXVZVx827FgBg9ZppwKmqV1fVdVV1xZL2Y6rqqqraXFUbJma9IMk5s6wJAOjfrM/gvCbJMZMNVbV7ktOTHJtkbZKTqmptVT0myYeTXDfjmgCAzu0xy4231t5RVWuWNB+VZHNr7eokqaqzkxyf5C5J7pwh9Hy9qs5vrX176Tar6pQkpyTJwQcfPMPqAYDVaqYBZxsOSHLNxPSWJA9trT0vSarqmUk+t7VwkySttTOTnJkk69evb7MtFQBYjeYRcLartfaaedcAAKxu83iK6tokB01MHzi2AQAsi3kEnEuTPKCqDqmqOyQ5Mcl5c6gDAOjUrB8Tf2OSdyc5rKq2VNXJrbWbkzwvyQVJNiU5p7V25SzrAAB2LbN+iuqkbbSfn+T8We4bANh1rahPMgYAWA4CDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdGfFBJyqOqKqzqiqc6vqufOuBwBYvWYacKrq1VV1XVVdsaT9mKq6qqo2V9WGJGmtbWqtnZrk55I8YpZ1AQB9m/UZnNckOWayoap2T3J6kmOTrE1yUlWtHec9Kclbk5w/47oAgI7NNOC01t6R5AtLmo9Ksrm1dnVr7aYkZyc5flz+vNbasUmeNsu6AIC+7TGHfR6Q5JqJ6S1JHlpVRyd5SpK9sp0zOFV1SpJTkuTggw+eWZEAwOo1j4CzVa21i5NcPMVyZyY5M0nWr1/fZlsVALAazeMpqmuTHDQxfeDYBgCwLOYRcC5N8oCqOqSq7pDkxCTnzaEOAKBTs35M/I1J3p3ksKraUlUnt9ZuTvK8JBck2ZTknNbalbOsAwDYtcz0HpzW2knbaD8/HgUHAGZkxXySMQDAchFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6M5UAaeq1s26EACA5TLtGZy/rqpLqupXqmqfmVYEALCTpgo4rbUfT/K0JAcleV9VvaGqHjPTygAAbqOp78FprX0kyUuSvCDJTyZ5RVX9d1U9ZVbFAQDcFtPeg/OgqnpZkk1JHpnkia21I8bxl82wPgCAW22PKZf7yyR/m+RFrbWvLza21j5VVS+ZSWUAALfRtAHnCUm+3lr7VpJU1W5J9m6tfa219nczqw4A4DaY9h6cf09yx4npO41ty6qqnlxVr6yqN1XVY5d7+wDArmHagLN3a+0rixPj+J2mWbGqXl1V11XVFUvaj6mqq6pqc1VtGLf7ltbas5OcmuSEKWsDALiFaQPOV6vqyMWJqnpwkq9vZ/lJr0lyzGRDVe2e5PQkxyZZm+Skqlo7schLxvkAALfatPfg/GaSN1fVp5JUkv0z5RmW1to7qmrNkuajkmxurV2dJFV1dpLjq2pTkj9K8q+ttfdvbXtVdUqSU5Lk4IMPnrJ8AGBXMlXAaa1dWlWHJzlsbLqqtfbNndjvAUmumZjekuShSX4tyaOT7FNV92+tnbGVWs5McmaSrF+/vu1EDQBAp6Y9g5MkD0myZlznyKpKa+21y1lMa+0VSV6xnNsEAHY9037Q398l+bMkP5Yh6Dwkyfqd2O+1Gb72YdGBY9uqdvqpG+ddAgCQ6c/grE+ytrW2XJeELk3ygKo6JEOwOTHJzy/Ttudi0+FHJEe7LxoAVoJpn6K6IsONxbdaVb0xybuTHFZVW6rq5NbazUmel+SCDF//cE5r7crbsv15W7Phrd/TtrCwcPsXAgB8x7RncPZN8uGquiTJNxYbW2tP2tGKrbWTttF+fpLzp9w/AMDUpg04C7MsokcXbjw0j3rkR+ddBgDskqa6RNVae3uSjyfZcxy/NMlWP6dmV7TurHXzLgEAmDDtU1TPTnJukr8Zmw5I8pYZ1QQAsFOmvcn4V5M8IsmNSdJa+0iS75tVUQAAO2PagPON1tpNixNVtUcSnyIMAKxI0wact1fVi5Lcsaoek+TNSf55dmUBANx20wacDUmuT/KhJM/J8Hj3S2ZVFADAzpj2yza/neSV4wAAsKJNFXCq6mPZyj03rbX7LXtFq9yWDe9M9p53FQCwa7s130W1aO8kP5vknstfDgDAzpv2g/4+PzFc21r7iyRPmG1pAAC3zbSXqI6cmNwtwxmdac/+AADcrqYNKadNjN+c4Wsbfm7ZqwEAWAbTPkX1U7MuBABguUx7ieq3tje/tfbny1MOAMDOuzVPUT0kyXnj9BOTXJLkI7MoCgBgZ0wbcA5McmRr7ctJUlULSd7aWnv6rAoDALitpv2qhnsnuWli+qaxDQBgxZn2DM5rk1xSVf84Tj85yVkzqQgAYCdN+xTVS6vqX5P8+Nj0rNbaB2ZXFgDAbTftJaokuVOSG1trL0+ypaoOmVFNAAA7ZaqAU1W/l+QFSV44Nu2Z5HWzKgoAYGdMewbnp5M8KclXk6S19qkkd51VUQAAO2PagHNTa60laUlSVXeeXUkAADtn2oBzTlX9TZK7V9Wzk/x7klfOriwAgNtuh09RVVUleVOSw5PcmOSwJL/bWnvbjGsDALhNdhhwWmutqs5vra1LItQAACvetJeo3l9VD5lpJQAAy2TaTzJ+aJKnV9XHMzxJVRlO7jxoVoUBANxW2w04VXVwa+2TSR53O9UDALDTdnQG5y0ZvkX8E1X19621n7kdagIA2Ck7ugenJsbvN8tCAACWy44CTtvGOADAirWjS1Q/VFU3ZjiTc8dxPPnuTcZ3m2l1AAC3wXYDTmtt99urEACA5TLt5+AAAKwaAg4A0B0BBwDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoADAHRHwAEAuiPgAADdEXDm4LQTjvvO+P4XXT6/QgCgUwIOANAdAed2tOnwI+ZdAgDsEgQcAKA7Ag4A0B0BBwDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwScObpw46HzLgEAuiTgAADdEXDmZGFhYd4lAEC3BBwAoDsCzu3s9FM3zrsEAOiegAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQHn9rKwz7wrAIBdhoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoADAHRHwAEAuiPgAADdEXBWqNNOOC5bNrxz3mUAwKq0YgJOVd2vql5VVefOuxYAYHWbacCpqldX1XVVdcWS9mOq6qqq2lxVG5KktXZ1a+3kWdYDAOwaZn0G5zVJjplsqKrdk5ye5Ngka5OcVFVrZ1wHALALmWnAaa29I8kXljQflWTzeMbmpiRnJzl+2m1W1SlVdVlVXXb99dcvY7Wzs2bDW+ddAgDsUuZxD84BSa6ZmN6S5ICquldVnZHkR6rqhdtaubV2ZmttfWtt/X777TfrWgGAVWiPeRewqLX2+SSnzrsOAGD1m8cZnGuTHDQxfeDYBgCwLOYRcC5N8oCqOqSq7pDkxCTnzaEOAKBTs35M/I1J3p3ksKraUlUnt9ZuTvK8JBck2ZTknNbalbOsY7Xb/6LL510CAKwqM70Hp7V20jbaz09y/iz3DQDsulbMJxkDACwXAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwLOCrewsDDvEgBg1RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6As5Is7JN1Z63LpsOP2OGimw4/IqefunFYzZNWAHALAg4A0B0BBwDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwScTly48dB5lwAAK4aAAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6As8qddsJx39O2ZsNb51AJAKwcAg4A0B0BBwDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoADAHRHwFlltvc9U/tfdPl3Jxb2ybqz1k293dNP3Tj1sgsLC7lw46G33F9nFhYW5l0CADtBwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7Ag4A0B0BBwDojoCzGi3sc5tWu3Djodn/ostv0bburHXZdPgRSZItG965zf0tLjON00447jvjS/e3rboWrdnw1qn3syNb29bCwsIt9reSTHOsAJiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4AEB3BBwAoDsCDgDQHQEHAOiOgAMAdGePeRewqKrunOSvk9yU5OLW2uvnXBIAsErN9AxOVb26qq6rqiuWtB9TVVdV1eaq2jA2PyXJua21Zyd50izrAgD6NutLVK9JcsxkQ1XtnuT0JMcmWZvkpKpam+TAJNeMi31rxnUBAB2bacBprb0jyReWNB+VZHNr7erW2k1Jzk5yfJItGULOduuqqlOq6rKquuz666+fRdldOf3UjTnthOO2Om/Nhrd+T9vCwsI2l9netpbasuGd37OtrS2zLevOWvc9y+1/0eW3qGtymUUXbjx0qvomt5WFfZIkmw4/YrvrbG1/21pu6bG6xf6W2bR13RrT9vM2Leyz3eO5td+9aZfb0e9VMvzOXLjx0Jke9944Vv2b5t9OT+Zxk/EB+e6ZmmQINgck+YckP1NV/zfJP29r5dbama219a219fvtt99sKwUAVqUVc5Nxa+2rSZ417zoAgNVvHmdwrk1y0MT0gWMbAMCymEfAuTTJA6rqkKq6Q5ITk5w3hzoAgE7N+jHxNyZ5d5LDqmpLVZ3cWrs5yfOSXJBkU5JzWmtXzrIOAGDXMtN7cFprJ22j/fwk589y3wDArstXNQAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOwIOANAdAQcA6I6AAwB0R8ABALoj4AAA3RFwAIDuCDgAQHcEHACgOysm4FTVMVV1VVVtrqoN864HAFi9VkTAqardk5ye5Ngka5OcVFVr51sVALBaVWtt3jWkqh6eZKG19rhx+oVJ0lr7w60se0qSU8bJw5JcNYOS9k3yuRlsl9uH/lu99N3qpe9Wr9Xed/dtre23tHGPeVSyFQckuWZiekuSh25twdbamUnOnGUxVXVZa239LPfB7Oi/1UvfrV76bvXqte9WxCUqAIDltFICzrVJDpqYPnBsAwC41VZKwLk0yQOq6pCqukOSE5OcN8d6ZnoJjJnTf6uXvlu99N3q1WXfrYibjJOkqh6f5C+S7J7k1a21l863IgBgtVoxAQcAYLmslEtUAADLRsBZwicqrwxV9eqquq6qrphou2dVva2qPjL+vMfYXlX1irHPPlhVR06s84vj8h+pql+caH9wVX1oXOcVVVW37yvsV1UdVFUXVdWHq+rKqvqNsV3/rXBVtXdVXVJV/zX23e+P7YdU1XvH4/2m8V7JVNVe4/Tmcf6aiW29cGy/qqoeN9Hub+yMVNXuVfWBqvqXcXrX7rfWmmEcMtz/89Ek90tyhyT/lWTtvOvaFYckP5HkyCRXTLT9SZIN4/iGJH88jj8+yb8mqSQPS/Lesf2eSa4ef95jHL/HOO+Scdka1z123q+5lyHJ9yc5chy/a5L/yfAJ5fpvhQ/j8bzLOL5nkveOx/mcJCeO7Wckee44/itJzhjHT0zypnF87fj3c68kh4x/V3f3N3bm/fdbSd6Q5F/G6V2635zBuaWjkmxurV3dWrspydlJjp9zTbuk1to7knxhSfPxSc4ax89K8uSJ9te2wXuS3L2qvj/J45K8rbX2hdbaF5O8Lckx47y7tdbe04Z/1a+d2BY7qbX26dba+8fxLyfZlOHDPPXfCjf2wVfGyT3HoSV5ZJJzx/alfbfYp+cmedR4Nu34JGe31r7RWvtYks0Z/r76GzsjVXVgkick+dtxurKL95uAc0tb+0TlA+ZUC9/r3q21T4/jn0ly73F8W/22vfYtW2lnmY2nvn8kw5kA/bcKjJc5Lk9yXYZQ+dEkN7TWbh4XmTze3+mjcf6Xktwrt75P2Xl/keT5Sb49Tt8ru3i/CTisSuP/3D0CuIJV1V2S/H2S32yt3Tg5T/+tXK21b7XWfjjDB64eleTw+VbEjlTVcUmua629b961rCQCzi35ROWV7bPj5YmMP68b27fVb9trP3Ar7SyTqtozQ7h5fWvtH8Zm/beKtNZuSHJRkodnuGy4+N2Fk8f7O300zt8nyedz6/uUnfOIJE+qqo9nuHz0yCQvzy7ebwLOLa20T1Tmls5LsvgkzS8m+aeJ9meMT+M8LMmXxkshFyR5bFXdY3xi57FJLhjn3VhVDxuvOz9jYlvspPGYvirJptban0/M0n8rXFXtV1V3H8fvmOQxGe6huijJU8fFlvbdYp8+NcnG8ezceUlOHJ/WOSTJAzLcGO5v7Ay01l7YWjuwtbYmwzHd2Fp7Wnb1fpv3Xc4rbcjwRMf/ZLju/OJ517OrDknemOTTSb6Z4XrvyRmuEV+Y5CNJ/j3JPcdlK8npY599KMn6ie38UoYb5TYnedZE+/okV4zr/FXGD700LEvf/ViGy08fTHL5ODxe/638IcmDknxg7Lsrkvzu2H6/DG90m5O8OcleY/ve4/Tmcf79Jrb14rF/rsrEU27+xs68D4/Od5+i2qX7zScZAwDdcYkKAOiOgAMAdEfAAQC6I+AAAN0RcACA7gg4wNxV1b2r6g1VdXVVva+q3l1VPz3vuoDVS8AB5mr8sL63JHlHa+1+rbUHZ/ggsQO3uyLAdgg4wLw9MslNrbUzFhtaa59orf3l+MWPf1pVl1bVB6vqOUlSVUdX1cVVdW5V/XdVvX4MSqmqB1fV28czQRdMfD3Er1fVh8ftnD2XVwrcbvbY8SIAM/XAJO/fxryTM3x1w0Oqaq8k/1FV/zbO+5Fx3U8l+Y8kj6iq9yb5yyTHt9aur6oTkrw0wycib0hySGvtG4tfRwD0S8ABVpSqOj3D1z3clOQTSR5UVYvfp7NPhu/HuSnJJa21LeM6lydZk+SGJD+Y5G3jCZ3dM3zlRzJ8/cDrq+otGS6JAR0TcIB5uzLJzyxOtNZ+tar2TXJZkk8m+bXW2gWTK1TV0Um+MdH0rQx/zyrJla21h29lP09I8hNJnpjkxVW1rrV28zK+DmAFcQ8OMG8bk+xdVc+daLvT+POCJM+tqj2TpKp+oKruvJ1tXZVkv6p6+Lj8nlX1wKraLclBrbWLkrwgw5mguyz3CwFWDmdwgLlqrbWqenKSl1XV85Ncn+SrGYLImzNcenr/eBPx9UmevJ1t3TReznpFVe2T4W/cX2T4FuTXjW2V5BWttRtm9JKAFcC3iQMA3XGJCgDojoADAHRHwAEAuiPgAADdEXAAgO4IOABAdwQcAKA7/x/cydhnNKEyagAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "genes_per_cell = np.sum(iPSC_data_T > 0)\n",
    "\n",
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(iPSC_data_T, bins=50)\n",
    "ax.set_xlabel('Genes')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Gene detection across Samples')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "valid-frederick",
   "metadata": {},
   "source": [
    "## Figure B"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "gross-beads",
   "metadata": {},
   "source": [
    "#### Removing cells with high mitochondrial gene expression (Quality Control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "saved-bhutan",
   "metadata": {},
   "source": [
    "(A) Histograms of count depth per sample. Sample 10 seems to be an outlier with 10^4.2 (~15848.9), indicating that the cells could either be abnormally large they are potentially quiescent populations (in a state or period of inactivity or dormancy). Data has been normalized (sum of expression values for each cell sums to 1 then returns normalized matrix to the metric space using median count per cell effectively scaling all cells as if they were sampled evenly).\n",
    "\n",
    "(B) Histogram of the number of genes detected per cell. A small noise peak is visible at approx. 28000 and 38000 genes. Data is tranposed and normailzed. \n",
    "sufficed. [Correction added on 5 July 2019, after first online publication: the x-axis label in panel B was corrected from “Count depth” to “Number of genes”.]\n",
    "- Try log-transforming this data\n",
    "- Each bar represents a gene, making it diffcult to distinguish between the genes and interepret the data. \n",
    "- Not quite sure what this graph is displaying (Exponentially decreasing by a factor of 10), indicating that \"frequency\" just represents sample number?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "comic-guitar",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iPSC_data_T_log = scprep.transform.log(iPSC_data_T)\n",
    "\n",
    "genes_per_cell = np.sum(iPSC_data_T_log > 0)\n",
    "\n",
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(iPSC_data_T_log, bins=50)\n",
    "ax.set_xlabel('Genes')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Gene detection across Samples')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "soviet-richardson",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Mitochondrial expression')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# get mitochondrial genes\n",
    "mitochondrial_gene_list = np.array([g.startswith('MT') for g in iPSC_data.columns])\n",
    "mitochondrial_gene_list\n",
    "#mitochondrial_gene_list\n",
    "\n",
    "# get expression\n",
    "mito_exp = iPSC_data.loc[:,mitochondrial_gene_list].mean(axis=1)\n",
    "\n",
    "# plotting\n",
    "fig, ax = plt.subplots(1, figsize=(6,5))\n",
    "\n",
    "ax.hist(mito_exp, bins=10)\n",
    "ax.axvline(np.percentile(mito_exp, 90), color = 'red')\n",
    "ax.set_xlabel('Mean mitochondrial expression')\n",
    "ax.set_ylabel('# of cells')\n",
    "ax.set_title('Mitochondrial expression')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "educated-skating",
   "metadata": {},
   "source": [
    "### Figure C"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "innocent-services",
   "metadata": {},
   "source": [
    "(C) Mean mitochondrial expression (MME) per cell sample. We want to remove the 5% of the cells that have an apoptotic signiature, which are typically present in mitochondrial cell lines. \n",
    "- I do not know what the large noise peak at approx. 41 MME indicates.\n",
    "- (high fraction of mitochondrial counts) Indicative of cells whose cytoplasmic mRNA has leaked out through a broken membrane, and thus, only mRNA located in the mitochondria is still conserved\n",
    "    - Mitochondrial read averages are relatively low,and only in particularly low count cells with few detected genes. These cells could not be filtered out using \"scprep.filter.filter_values\".\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "confirmed-seven",
   "metadata": {},
   "outputs": [],
   "source": [
    "#iPSC_data_ln = scprep.filter.filter_values(iPSC_data, percentile=95, keep_cells='below')\n",
    "#iPSC_data_ln\n",
    "#This did not work"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unusual-maximum",
   "metadata": {},
   "source": [
    "#### Transforming the data\n",
    "- The purpose of transforming data is to make sure that each gene or feature in our counts matrix is counted equally. \n",
    "- Genes that are more highly expressed (i.e. have larger values) will be considered more important and will have a larger impact on downstream analysis.\n",
    "    - Many Transform options: scprep.transform.log(), scprep.transform.sqrt() or scprep.transform.arcsinh().\n",
    "    - log-transform doesn’t like zeros, which are incredibly common in single cell datasets. To overcome this, people commonly add a pseudocount to their data, either 1 or a very small value called machine epsilon. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "exterior-science",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEC24B-AS1</th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A1CF</th>\n",
       "      <th>GGACT</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2ML1</th>\n",
       "      <th>A2MP1</th>\n",
       "      <th>A4GALT</th>\n",
       "      <th>A4GNT</th>\n",
       "      <th>AAAS</th>\n",
       "      <th>...</th>\n",
       "      <th>ZNF826P</th>\n",
       "      <th>ZNF876P</th>\n",
       "      <th>ZNF890P</th>\n",
       "      <th>ZNRF2P2</th>\n",
       "      <th>DPY19L2P3</th>\n",
       "      <th>HYDIN</th>\n",
       "      <th>PCDHB18</th>\n",
       "      <th>RNF213</th>\n",
       "      <th>SFMBT1</th>\n",
       "      <th>ERCC-00112</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sample 1</th>\n",
       "      <td>1.073313</td>\n",
       "      <td>0.758947</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.902341</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.561799</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.141078</td>\n",
       "      <td>...</td>\n",
       "      <td>1.654388</td>\n",
       "      <td>0.464758</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.464758</td>\n",
       "      <td>0.709930</td>\n",
       "      <td>0.709930</td>\n",
       "      <td>0.268328</td>\n",
       "      <td>5.320338</td>\n",
       "      <td>3.962575</td>\n",
       "      <td>0.379473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 2</th>\n",
       "      <td>0.949210</td>\n",
       "      <td>1.129602</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.400893</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.811583</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.001928</td>\n",
       "      <td>...</td>\n",
       "      <td>1.621111</td>\n",
       "      <td>0.908845</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.273861</td>\n",
       "      <td>0.670820</td>\n",
       "      <td>0.725259</td>\n",
       "      <td>0.670820</td>\n",
       "      <td>5.889567</td>\n",
       "      <td>3.776903</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 3</th>\n",
       "      <td>0.589915</td>\n",
       "      <td>0.874643</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.963634</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.372827</td>\n",
       "      <td>15.139551</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.773699</td>\n",
       "      <td>...</td>\n",
       "      <td>1.087198</td>\n",
       "      <td>0.372827</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.645755</td>\n",
       "      <td>0.527257</td>\n",
       "      <td>0.791202</td>\n",
       "      <td>0.527257</td>\n",
       "      <td>5.338820</td>\n",
       "      <td>3.355890</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 4</th>\n",
       "      <td>1.184905</td>\n",
       "      <td>0.684105</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.530094</td>\n",
       "      <td>0.612372</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.607492</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.831028</td>\n",
       "      <td>...</td>\n",
       "      <td>4.423573</td>\n",
       "      <td>3.420965</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.432435</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.119906</td>\n",
       "      <td>0.432435</td>\n",
       "      <td>5.732626</td>\n",
       "      <td>4.670653</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 5</th>\n",
       "      <td>1.132254</td>\n",
       "      <td>0.524404</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.427785</td>\n",
       "      <td>0.427785</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.383637</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.221435</td>\n",
       "      <td>...</td>\n",
       "      <td>3.450507</td>\n",
       "      <td>2.949746</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.118490</td>\n",
       "      <td>0.427785</td>\n",
       "      <td>6.135389</td>\n",
       "      <td>3.731086</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 6</th>\n",
       "      <td>0.857904</td>\n",
       "      <td>0.633246</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.448330</td>\n",
       "      <td>0.577927</td>\n",
       "      <td>0.258844</td>\n",
       "      <td>0.258844</td>\n",
       "      <td>3.460347</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.938136</td>\n",
       "      <td>...</td>\n",
       "      <td>3.479655</td>\n",
       "      <td>2.637613</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.370443</td>\n",
       "      <td>0.258844</td>\n",
       "      <td>6.266259</td>\n",
       "      <td>4.064849</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 7</th>\n",
       "      <td>1.040673</td>\n",
       "      <td>0.834266</td>\n",
       "      <td>0.681175</td>\n",
       "      <td>0.556776</td>\n",
       "      <td>12.723875</td>\n",
       "      <td>3.637719</td>\n",
       "      <td>0.277489</td>\n",
       "      <td>5.114391</td>\n",
       "      <td>0.963846</td>\n",
       "      <td>5.401389</td>\n",
       "      <td>...</td>\n",
       "      <td>2.100238</td>\n",
       "      <td>1.497999</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.277489</td>\n",
       "      <td>0.481664</td>\n",
       "      <td>4.952979</td>\n",
       "      <td>1.362718</td>\n",
       "      <td>9.433822</td>\n",
       "      <td>4.363256</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 8</th>\n",
       "      <td>0.412311</td>\n",
       "      <td>0.504975</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>27.751829</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.412311</td>\n",
       "      <td>8.436587</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.308132</td>\n",
       "      <td>...</td>\n",
       "      <td>0.714843</td>\n",
       "      <td>0.291548</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.412311</td>\n",
       "      <td>2.798750</td>\n",
       "      <td>0.504975</td>\n",
       "      <td>6.169036</td>\n",
       "      <td>4.463407</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 9</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.461519</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.461519</td>\n",
       "      <td>19.301114</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.221475</td>\n",
       "      <td>4.901122</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.917908</td>\n",
       "      <td>...</td>\n",
       "      <td>0.266458</td>\n",
       "      <td>0.532917</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.266458</td>\n",
       "      <td>0.754321</td>\n",
       "      <td>4.893874</td>\n",
       "      <td>0.652687</td>\n",
       "      <td>5.773214</td>\n",
       "      <td>3.779418</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 10</th>\n",
       "      <td>0.389872</td>\n",
       "      <td>0.478539</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.478539</td>\n",
       "      <td>22.736249</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.781025</td>\n",
       "      <td>9.945200</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.577663</td>\n",
       "      <td>...</td>\n",
       "      <td>0.389872</td>\n",
       "      <td>0.478539</td>\n",
       "      <td>0.275681</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.275681</td>\n",
       "      <td>3.414528</td>\n",
       "      <td>0.552268</td>\n",
       "      <td>6.630762</td>\n",
       "      <td>3.854737</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 19556 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           SEC24B-AS1      A1BG      A1CF     GGACT        A2M     A2ML1  \\\n",
       "Sample 1     1.073313  0.758947  0.000000  0.000000   7.902341  0.000000   \n",
       "Sample 2     0.949210  1.129602  0.000000  0.000000   8.400893  0.000000   \n",
       "Sample 3     0.589915  0.874643  0.000000  0.000000   9.963634  0.000000   \n",
       "Sample 4     1.184905  0.684105  0.000000  0.530094   0.612372  0.000000   \n",
       "Sample 5     1.132254  0.524404  0.000000  0.427785   0.427785  0.000000   \n",
       "Sample 6     0.857904  0.633246  0.000000  0.448330   0.577927  0.258844   \n",
       "Sample 7     1.040673  0.834266  0.681175  0.556776  12.723875  3.637719   \n",
       "Sample 8     0.412311  0.504975  0.000000  0.000000  27.751829  0.000000   \n",
       "Sample 9     0.000000  0.461519  0.000000  0.461519  19.301114  0.000000   \n",
       "Sample 10    0.389872  0.478539  0.000000  0.478539  22.736249  0.000000   \n",
       "\n",
       "              A2MP1     A4GALT     A4GNT      AAAS  ...   ZNF826P   ZNF876P  \\\n",
       "Sample 1   0.000000  14.561799  0.000000  7.141078  ...  1.654388  0.464758   \n",
       "Sample 2   0.000000  14.811583  0.000000  7.001928  ...  1.621111  0.908845   \n",
       "Sample 3   0.372827  15.139551  0.000000  6.773699  ...  1.087198  0.372827   \n",
       "Sample 4   0.000000   3.607492  0.000000  7.831028  ...  4.423573  3.420965   \n",
       "Sample 5   0.000000   3.383637  0.000000  8.221435  ...  3.450507  2.949746   \n",
       "Sample 6   0.258844   3.460347  0.000000  7.938136  ...  3.479655  2.637613   \n",
       "Sample 7   0.277489   5.114391  0.963846  5.401389  ...  2.100238  1.497999   \n",
       "Sample 8   0.412311   8.436587  0.000000  4.308132  ...  0.714843  0.291548   \n",
       "Sample 9   1.221475   4.901122  0.000000  3.917908  ...  0.266458  0.532917   \n",
       "Sample 10  0.781025   9.945200  0.000000  4.577663  ...  0.389872  0.478539   \n",
       "\n",
       "            ZNF890P   ZNRF2P2  DPY19L2P3     HYDIN   PCDHB18    RNF213  \\\n",
       "Sample 1   0.000000  0.464758   0.709930  0.709930  0.268328  5.320338   \n",
       "Sample 2   0.000000  0.273861   0.670820  0.725259  0.670820  5.889567   \n",
       "Sample 3   0.000000  0.645755   0.527257  0.791202  0.527257  5.338820   \n",
       "Sample 4   0.000000  0.432435   0.000000  2.119906  0.432435  5.732626   \n",
       "Sample 5   0.000000  0.000000   0.000000  2.118490  0.427785  6.135389   \n",
       "Sample 6   0.000000  0.000000   0.000000  2.370443  0.258844  6.266259   \n",
       "Sample 7   0.000000  0.277489   0.481664  4.952979  1.362718  9.433822   \n",
       "Sample 8   0.000000  0.000000   0.412311  2.798750  0.504975  6.169036   \n",
       "Sample 9   0.000000  0.266458   0.754321  4.893874  0.652687  5.773214   \n",
       "Sample 10  0.275681  0.000000   0.275681  3.414528  0.552268  6.630762   \n",
       "\n",
       "             SFMBT1  ERCC-00112  \n",
       "Sample 1   3.962575    0.379473  \n",
       "Sample 2   3.776903    0.000000  \n",
       "Sample 3   3.355890    0.000000  \n",
       "Sample 4   4.670653    0.000000  \n",
       "Sample 5   3.731086    0.000000  \n",
       "Sample 6   4.064849    0.000000  \n",
       "Sample 7   4.363256    0.000000  \n",
       "Sample 8   4.463407    0.000000  \n",
       "Sample 9   3.779418    0.000000  \n",
       "Sample 10  3.854737    0.000000  \n",
       "\n",
       "[10 rows x 19556 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_data_sq = scprep.transform.sqrt(iPSC_data)\n",
    "iPSC_data_sq"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "turkish-tourist",
   "metadata": {},
   "source": [
    "### Missing parts: \n",
    "- Removing cells with high mitochondrial gene expression (cell degradation through apoptosis)(Resolved):\n",
    "    - Could not select MT gene rows in table\n",
    "- Normalization:\n",
    "    - Library normalization applies to # UMI/Cell ratio so it doesn't really apply to our dataset. \n",
    "- Merging Batches (resolved): \n",
    "    - Haven't done it bc our data is not \"10X_genomic\" and does not contain UMI count. \n",
    "    - May not even be necessary since all the samples are contained within one file\n",
    "- Differences in Data: \n",
    "    - iPSC: Consists of one file with the gene names and IPS rna count (mtx).\n",
    "    - 10X Genomics counts: Consists of five samples, each with three datasets: barcodes (\"AAACATTGAAAGCA-1\"), gene names, and mtx data\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "conservative-verse",
   "metadata": {},
   "source": [
    "## Imputation and the Netflix Problem (Denoising data using MAGIC):\n",
    "- Imputation covers a set of approaches for taking missing values in a matrix (e.g. a counts matrix of genes by cells) and filling them in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "signal-french",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: magic-impute in /root/.local/lib/python3.8/site-packages (3.0.0)\n",
      "Requirement already satisfied: scprep>=1.0 in /root/.local/lib/python3.8/site-packages (from magic-impute) (1.1.0)\n",
      "Requirement already satisfied: matplotlib in /opt/python/lib/python3.8/site-packages (from magic-impute) (3.3.3)\n",
      "Requirement already satisfied: scikit-learn>=0.19.1 in /opt/python/lib/python3.8/site-packages (from magic-impute) (0.24.0)\n",
      "Requirement already satisfied: scipy>=1.1.0 in /opt/python/lib/python3.8/site-packages (from magic-impute) (1.6.0)\n",
      "Requirement already satisfied: graphtools>=1.4.0 in /root/.local/lib/python3.8/site-packages (from magic-impute) (1.5.2)\n",
      "Requirement already satisfied: tasklogger>=1.0.0 in /root/.local/lib/python3.8/site-packages (from magic-impute) (1.0.0)\n",
      "Requirement already satisfied: future in /opt/python/lib/python3.8/site-packages (from magic-impute) (0.18.2)\n",
      "Requirement already satisfied: numpy>=1.14.0 in /opt/python/lib/python3.8/site-packages (from magic-impute) (1.19.5)\n",
      "Requirement already satisfied: pandas>=0.25 in /opt/python/lib/python3.8/site-packages (from magic-impute) (1.2.0)\n",
      "Requirement already satisfied: Deprecated in /root/.local/lib/python3.8/site-packages (from graphtools>=1.4.0->magic-impute) (1.2.12)\n",
      "Requirement already satisfied: pygsp>=0.5.1 in /root/.local/lib/python3.8/site-packages (from graphtools>=1.4.0->magic-impute) (0.5.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /opt/python/lib/python3.8/site-packages (from pandas>=0.25->magic-impute) (2.8.1)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/python/lib/python3.8/site-packages (from pandas>=0.25->magic-impute) (2020.5)\n",
      "Requirement already satisfied: six>=1.5 in /opt/python/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas>=0.25->magic-impute) (1.15.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.19.1->magic-impute) (2.1.0)\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/python/lib/python3.8/site-packages (from scikit-learn>=0.19.1->magic-impute) (1.0.0)\n",
      "Requirement already satisfied: decorator>=4.3.0 in /opt/python/lib/python3.8/site-packages (from scprep>=1.0->magic-impute) (4.4.2)\n",
      "Requirement already satisfied: packaging in /opt/python/lib/python3.8/site-packages (from scprep>=1.0->magic-impute) (20.8)\n",
      "Requirement already satisfied: wrapt<2,>=1.10 in /opt/python/lib/python3.8/site-packages (from Deprecated->graphtools>=1.4.0->magic-impute) (1.12.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/python/lib/python3.8/site-packages (from matplotlib->magic-impute) (0.10.0)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/python/lib/python3.8/site-packages (from matplotlib->magic-impute) (8.1.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/python/lib/python3.8/site-packages (from matplotlib->magic-impute) (1.3.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/python/lib/python3.8/site-packages (from matplotlib->magic-impute) (2.4.7)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --user magic-impute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "individual-western",
   "metadata": {},
   "outputs": [],
   "source": [
    "import magic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "extraordinary-canvas",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculating MAGIC...\n",
      "  Running MAGIC on 10 cells and 19556 genes.\n",
      "  Calculating graph and diffusion operator...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/root/.local/lib/python3.8/site-packages/graphtools/base.py:163: RuntimeWarning: Cannot perform PCA to 100 dimensions on data with min(n_samples, n_features) = 10\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Calculating KNN search...\n",
      "    Calculated KNN search in 0.02 seconds.\n",
      "    Calculating affinities...\n",
      "    Calculated affinities in 0.02 seconds.\n",
      "  Calculated graph and diffusion operator in 1.44 seconds.\n",
      "  Calculating imputation...\n",
      "Calculated MAGIC in 3.26 seconds.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/python/lib/python3.8/site-packages/sklearn/neighbors/_base.py:462: UserWarning: cannot use tree with sparse input: using brute force\n",
      "  warnings.warn(\"cannot use tree with sparse input: \"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SEC24B-AS1</th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A1CF</th>\n",
       "      <th>GGACT</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2ML1</th>\n",
       "      <th>A2MP1</th>\n",
       "      <th>A4GALT</th>\n",
       "      <th>A4GNT</th>\n",
       "      <th>AAAS</th>\n",
       "      <th>...</th>\n",
       "      <th>ZNF826P</th>\n",
       "      <th>ZNF876P</th>\n",
       "      <th>ZNF890P</th>\n",
       "      <th>ZNRF2P2</th>\n",
       "      <th>DPY19L2P3</th>\n",
       "      <th>HYDIN</th>\n",
       "      <th>PCDHB18</th>\n",
       "      <th>RNF213</th>\n",
       "      <th>SFMBT1</th>\n",
       "      <th>ERCC-00112</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sample 1</th>\n",
       "      <td>0.767804</td>\n",
       "      <td>0.704326</td>\n",
       "      <td>0.059948</td>\n",
       "      <td>0.267338</td>\n",
       "      <td>10.908274</td>\n",
       "      <td>0.344221</td>\n",
       "      <td>0.318763</td>\n",
       "      <td>8.825780</td>\n",
       "      <td>0.084826</td>\n",
       "      <td>6.357003</td>\n",
       "      <td>...</td>\n",
       "      <td>1.878697</td>\n",
       "      <td>1.294743</td>\n",
       "      <td>0.025617</td>\n",
       "      <td>0.251722</td>\n",
       "      <td>0.401867</td>\n",
       "      <td>2.353190</td>\n",
       "      <td>0.556498</td>\n",
       "      <td>6.198194</td>\n",
       "      <td>3.978444</td>\n",
       "      <td>0.044345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 2</th>\n",
       "      <td>0.767835</td>\n",
       "      <td>0.704525</td>\n",
       "      <td>0.059922</td>\n",
       "      <td>0.267102</td>\n",
       "      <td>10.908158</td>\n",
       "      <td>0.344048</td>\n",
       "      <td>0.318653</td>\n",
       "      <td>8.831321</td>\n",
       "      <td>0.084788</td>\n",
       "      <td>6.357215</td>\n",
       "      <td>...</td>\n",
       "      <td>1.878060</td>\n",
       "      <td>1.293927</td>\n",
       "      <td>0.025600</td>\n",
       "      <td>0.251907</td>\n",
       "      <td>0.402116</td>\n",
       "      <td>2.351988</td>\n",
       "      <td>0.556501</td>\n",
       "      <td>6.197744</td>\n",
       "      <td>3.978184</td>\n",
       "      <td>0.044402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 3</th>\n",
       "      <td>0.767530</td>\n",
       "      <td>0.704486</td>\n",
       "      <td>0.059912</td>\n",
       "      <td>0.267020</td>\n",
       "      <td>10.916777</td>\n",
       "      <td>0.343964</td>\n",
       "      <td>0.318920</td>\n",
       "      <td>8.833415</td>\n",
       "      <td>0.084775</td>\n",
       "      <td>6.355827</td>\n",
       "      <td>...</td>\n",
       "      <td>1.876743</td>\n",
       "      <td>1.292883</td>\n",
       "      <td>0.025632</td>\n",
       "      <td>0.251906</td>\n",
       "      <td>0.402314</td>\n",
       "      <td>2.352430</td>\n",
       "      <td>0.556565</td>\n",
       "      <td>6.197718</td>\n",
       "      <td>3.978109</td>\n",
       "      <td>0.044406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 4</th>\n",
       "      <td>0.801073</td>\n",
       "      <td>0.693985</td>\n",
       "      <td>0.061070</td>\n",
       "      <td>0.294735</td>\n",
       "      <td>9.842573</td>\n",
       "      <td>0.356864</td>\n",
       "      <td>0.295231</td>\n",
       "      <td>8.159229</td>\n",
       "      <td>0.086413</td>\n",
       "      <td>6.515945</td>\n",
       "      <td>...</td>\n",
       "      <td>2.088391</td>\n",
       "      <td>1.485917</td>\n",
       "      <td>0.023047</td>\n",
       "      <td>0.238229</td>\n",
       "      <td>0.357403</td>\n",
       "      <td>2.381160</td>\n",
       "      <td>0.546441</td>\n",
       "      <td>6.225182</td>\n",
       "      <td>4.004084</td>\n",
       "      <td>0.038418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 5</th>\n",
       "      <td>0.801302</td>\n",
       "      <td>0.693921</td>\n",
       "      <td>0.061058</td>\n",
       "      <td>0.294895</td>\n",
       "      <td>9.834885</td>\n",
       "      <td>0.356849</td>\n",
       "      <td>0.295055</td>\n",
       "      <td>8.155106</td>\n",
       "      <td>0.086396</td>\n",
       "      <td>6.517142</td>\n",
       "      <td>...</td>\n",
       "      <td>2.089785</td>\n",
       "      <td>1.487175</td>\n",
       "      <td>0.023027</td>\n",
       "      <td>0.238133</td>\n",
       "      <td>0.357107</td>\n",
       "      <td>2.381171</td>\n",
       "      <td>0.546344</td>\n",
       "      <td>6.225259</td>\n",
       "      <td>4.004199</td>\n",
       "      <td>0.038383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 6</th>\n",
       "      <td>0.801369</td>\n",
       "      <td>0.693922</td>\n",
       "      <td>0.061061</td>\n",
       "      <td>0.294927</td>\n",
       "      <td>9.832787</td>\n",
       "      <td>0.356876</td>\n",
       "      <td>0.295001</td>\n",
       "      <td>8.154331</td>\n",
       "      <td>0.086400</td>\n",
       "      <td>6.517467</td>\n",
       "      <td>...</td>\n",
       "      <td>2.090137</td>\n",
       "      <td>1.487466</td>\n",
       "      <td>0.023020</td>\n",
       "      <td>0.238126</td>\n",
       "      <td>0.357045</td>\n",
       "      <td>2.381121</td>\n",
       "      <td>0.546325</td>\n",
       "      <td>6.225281</td>\n",
       "      <td>4.004233</td>\n",
       "      <td>0.038378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 7</th>\n",
       "      <td>0.776011</td>\n",
       "      <td>0.697926</td>\n",
       "      <td>0.063757</td>\n",
       "      <td>0.280900</td>\n",
       "      <td>10.667081</td>\n",
       "      <td>0.366721</td>\n",
       "      <td>0.315811</td>\n",
       "      <td>8.518884</td>\n",
       "      <td>0.090214</td>\n",
       "      <td>6.385003</td>\n",
       "      <td>...</td>\n",
       "      <td>1.944363</td>\n",
       "      <td>1.360664</td>\n",
       "      <td>0.025350</td>\n",
       "      <td>0.244198</td>\n",
       "      <td>0.385663</td>\n",
       "      <td>2.400742</td>\n",
       "      <td>0.558079</td>\n",
       "      <td>6.230791</td>\n",
       "      <td>3.992142</td>\n",
       "      <td>0.041065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 8</th>\n",
       "      <td>0.746571</td>\n",
       "      <td>0.693359</td>\n",
       "      <td>0.059861</td>\n",
       "      <td>0.272188</td>\n",
       "      <td>11.458855</td>\n",
       "      <td>0.342870</td>\n",
       "      <td>0.340679</td>\n",
       "      <td>8.714429</td>\n",
       "      <td>0.084701</td>\n",
       "      <td>6.260024</td>\n",
       "      <td>...</td>\n",
       "      <td>1.823271</td>\n",
       "      <td>1.265123</td>\n",
       "      <td>0.028340</td>\n",
       "      <td>0.243105</td>\n",
       "      <td>0.403512</td>\n",
       "      <td>2.432194</td>\n",
       "      <td>0.560079</td>\n",
       "      <td>6.213423</td>\n",
       "      <td>3.984870</td>\n",
       "      <td>0.041647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 9</th>\n",
       "      <td>0.746484</td>\n",
       "      <td>0.693537</td>\n",
       "      <td>0.059836</td>\n",
       "      <td>0.272126</td>\n",
       "      <td>11.453892</td>\n",
       "      <td>0.342718</td>\n",
       "      <td>0.340837</td>\n",
       "      <td>8.717684</td>\n",
       "      <td>0.084667</td>\n",
       "      <td>6.260293</td>\n",
       "      <td>...</td>\n",
       "      <td>1.822741</td>\n",
       "      <td>1.264605</td>\n",
       "      <td>0.028286</td>\n",
       "      <td>0.243406</td>\n",
       "      <td>0.403886</td>\n",
       "      <td>2.431804</td>\n",
       "      <td>0.560121</td>\n",
       "      <td>6.212753</td>\n",
       "      <td>3.984403</td>\n",
       "      <td>0.041712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 10</th>\n",
       "      <td>0.748861</td>\n",
       "      <td>0.693597</td>\n",
       "      <td>0.060066</td>\n",
       "      <td>0.273175</td>\n",
       "      <td>11.397196</td>\n",
       "      <td>0.344212</td>\n",
       "      <td>0.338906</td>\n",
       "      <td>8.700671</td>\n",
       "      <td>0.084992</td>\n",
       "      <td>6.269923</td>\n",
       "      <td>...</td>\n",
       "      <td>1.832499</td>\n",
       "      <td>1.272734</td>\n",
       "      <td>0.028382</td>\n",
       "      <td>0.243011</td>\n",
       "      <td>0.401794</td>\n",
       "      <td>2.429706</td>\n",
       "      <td>0.559793</td>\n",
       "      <td>6.214978</td>\n",
       "      <td>3.985135</td>\n",
       "      <td>0.041579</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 19556 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           SEC24B-AS1      A1BG      A1CF     GGACT        A2M     A2ML1  \\\n",
       "Sample 1     0.767804  0.704326  0.059948  0.267338  10.908274  0.344221   \n",
       "Sample 2     0.767835  0.704525  0.059922  0.267102  10.908158  0.344048   \n",
       "Sample 3     0.767530  0.704486  0.059912  0.267020  10.916777  0.343964   \n",
       "Sample 4     0.801073  0.693985  0.061070  0.294735   9.842573  0.356864   \n",
       "Sample 5     0.801302  0.693921  0.061058  0.294895   9.834885  0.356849   \n",
       "Sample 6     0.801369  0.693922  0.061061  0.294927   9.832787  0.356876   \n",
       "Sample 7     0.776011  0.697926  0.063757  0.280900  10.667081  0.366721   \n",
       "Sample 8     0.746571  0.693359  0.059861  0.272188  11.458855  0.342870   \n",
       "Sample 9     0.746484  0.693537  0.059836  0.272126  11.453892  0.342718   \n",
       "Sample 10    0.748861  0.693597  0.060066  0.273175  11.397196  0.344212   \n",
       "\n",
       "              A2MP1    A4GALT     A4GNT      AAAS  ...   ZNF826P   ZNF876P  \\\n",
       "Sample 1   0.318763  8.825780  0.084826  6.357003  ...  1.878697  1.294743   \n",
       "Sample 2   0.318653  8.831321  0.084788  6.357215  ...  1.878060  1.293927   \n",
       "Sample 3   0.318920  8.833415  0.084775  6.355827  ...  1.876743  1.292883   \n",
       "Sample 4   0.295231  8.159229  0.086413  6.515945  ...  2.088391  1.485917   \n",
       "Sample 5   0.295055  8.155106  0.086396  6.517142  ...  2.089785  1.487175   \n",
       "Sample 6   0.295001  8.154331  0.086400  6.517467  ...  2.090137  1.487466   \n",
       "Sample 7   0.315811  8.518884  0.090214  6.385003  ...  1.944363  1.360664   \n",
       "Sample 8   0.340679  8.714429  0.084701  6.260024  ...  1.823271  1.265123   \n",
       "Sample 9   0.340837  8.717684  0.084667  6.260293  ...  1.822741  1.264605   \n",
       "Sample 10  0.338906  8.700671  0.084992  6.269923  ...  1.832499  1.272734   \n",
       "\n",
       "            ZNF890P   ZNRF2P2  DPY19L2P3     HYDIN   PCDHB18    RNF213  \\\n",
       "Sample 1   0.025617  0.251722   0.401867  2.353190  0.556498  6.198194   \n",
       "Sample 2   0.025600  0.251907   0.402116  2.351988  0.556501  6.197744   \n",
       "Sample 3   0.025632  0.251906   0.402314  2.352430  0.556565  6.197718   \n",
       "Sample 4   0.023047  0.238229   0.357403  2.381160  0.546441  6.225182   \n",
       "Sample 5   0.023027  0.238133   0.357107  2.381171  0.546344  6.225259   \n",
       "Sample 6   0.023020  0.238126   0.357045  2.381121  0.546325  6.225281   \n",
       "Sample 7   0.025350  0.244198   0.385663  2.400742  0.558079  6.230791   \n",
       "Sample 8   0.028340  0.243105   0.403512  2.432194  0.560079  6.213423   \n",
       "Sample 9   0.028286  0.243406   0.403886  2.431804  0.560121  6.212753   \n",
       "Sample 10  0.028382  0.243011   0.401794  2.429706  0.559793  6.214978   \n",
       "\n",
       "             SFMBT1  ERCC-00112  \n",
       "Sample 1   3.978444    0.044345  \n",
       "Sample 2   3.978184    0.044402  \n",
       "Sample 3   3.978109    0.044406  \n",
       "Sample 4   4.004084    0.038418  \n",
       "Sample 5   4.004199    0.038383  \n",
       "Sample 6   4.004233    0.038378  \n",
       "Sample 7   3.992142    0.041065  \n",
       "Sample 8   3.984870    0.041647  \n",
       "Sample 9   3.984403    0.041712  \n",
       "Sample 10  3.985135    0.041579  \n",
       "\n",
       "[10 rows x 19556 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "magic_operator = magic.MAGIC(knn=3, solver='approximate')\n",
    "iPSC_data_magic = magic_operator.fit_transform(iPSC_data_sq)\n",
    "iPSC_data_magic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "lasting-sarah",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "surprised-journalism",
   "metadata": {},
   "outputs": [],
   "source": [
    "pc_op = PCA()\n",
    "scaler = StandardScaler() \n",
    "iPSC_scaled =scaler.fit_transform(iPSC_data_magic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dress-cuisine",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.22138461, -0.21993051, -0.23437302, ..., -1.22589453,\n",
       "        -1.23000064, -1.11756109],\n",
       "       [ 1.45033817,  1.49176397,  1.48377609, ..., -0.83247416,\n",
       "        -0.79541831, -0.78306665],\n",
       "       [-0.60624624, -0.62951196, -0.63747517, ..., -0.68231515,\n",
       "        -0.7032893 , -0.50463625],\n",
       "       ...,\n",
       "       [-1.32684609, -1.36438375, -1.36647779, ..., -0.0590859 ,\n",
       "        -0.11482575,  0.07042979],\n",
       "       [-1.04310483, -1.06792792, -1.07503654, ..., -0.43023784,\n",
       "        -0.4747667 , -0.40496118],\n",
       "       [ 1.25108478,  1.27589456,  1.27747359, ...,  0.09181159,\n",
       "         0.11980929,  0.06265688]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iPSC_scaled_T = scaler.fit_transform(iPSC_data_magic).T\n",
    "iPSC_scaled_T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "driven-exposure",
   "metadata": {},
   "outputs": [],
   "source": [
    "#genes_per_cell = np.sum(iPSC_scaled > 0, axis=0)\n",
    "\n",
    "#fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "#ax.hist(iPSC_scaled, bins=50)\n",
    "#ax.set_xlabel('Samples')\n",
    "#ax.set_ylabel('Frequency')\n",
    "#ax.set_yscale('symlog')\n",
    "#ax.set_title('Count Depths across Samples')\n",
    "#fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "architectural-webmaster",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "genes_per_cell = np.sum(iPSC_scaled_T > 0, axis=0)\n",
    "\n",
    "fig, ax = plt.subplots(1, figsize=(8,8))\n",
    "ax.hist(iPSC_scaled_T, bins=50)\n",
    "ax.set_xlabel('Genes')\n",
    "ax.set_ylabel('Frequency')\n",
    "ax.set_yscale('symlog')\n",
    "ax.set_title('Gene detection across Samples')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "handled-drive",
   "metadata": {},
   "source": [
    "## Visualization (Principle Component Analysis): \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "removable-confusion",
   "metadata": {},
   "source": [
    "#### Heatmaps (seaborn):\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ranking-casino",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "liable-darwin",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaled =scaler.fit_transform(iPSC_data_magic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "tropical-leather",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "romantic-easter",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: fastcluster in /opt/python/lib/python3.8/site-packages (1.1.28)\n",
      "Requirement already satisfied: numpy>=1.9 in /opt/python/lib/python3.8/site-packages (from fastcluster) (1.19.5)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install fastcluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "tutorial-government",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(651.9999999999999, 0.5, 'Samples (10)')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cg = sns.clustermap(scaled, cmap='inferno', xticklabels=[], yticklabels=[], standard_scale = 1)\n",
    "cg.ax_heatmap.set_xlabel('Genes ({})'.format(scaled.shape[1]))\n",
    "cg.ax_heatmap.set_ylabel('Samples ({})'.format(scaled.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "greater-pizza",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "optimum-commission",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cg = sns.clustermap(scaled, cmap='inferno', standard_scale = 1, col_cluster = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "basic-paragraph",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cg = sns.clustermap(scaled, cmap='inferno', standard_scale = 1, row_cluster = False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "substantial-manitoba",
   "metadata": {},
   "source": [
    "It is difficult to draw any conclusions from this heatmap: \n",
    "- How close together are any two cells? \n",
    "- How do genes covary?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "forced-immigration",
   "metadata": {},
   "source": [
    "### Reduction (PCA)\n",
    "- Doing multiplication or inversion of matrices with 1,000+ dimensions gets very slow and takes up a lot of memory so we typically only store 100-500 PCs and use this for downstream analysis. PCA gives us a quantification of how much variance we’ve lost by removing some of the final principal components. This means we can figure out how many we need to capture 99.999% of the variance in a dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "pending-setup",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#This may not even be necerssary bc we do not have thousands of cells \n",
    "#data_pcs = scprep.reduce.pca(scaled, n_pca=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bored-washington",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, figsize=(5,5))\n",
    "\n",
    "ax.scatter(scaled[:,0], scaled[:,1], s=20)\n",
    "ax.set_xlabel('PC1')\n",
    "ax.set_ylabel('PC2')\n",
    "ax.set_title('T-cell - PCA')\n",
    "\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "lasting-treatment",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import rcParams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "described-popularity",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f4ec1425ca0>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fit_transform() is used on the training data so that we can scale the training data and also learn the scaling parameters of that data. \n",
    "#Here, the model built by us will learn the mean and variance of the features of the training set. These learned parameters are then used to scale our test data.\n",
    "\n",
    "X = pc_op.fit_transform(iPSC_data_magic.values.T)\n",
    "X.shape \n",
    "#plt.axline(0, c=(.5, .5, .5))\n",
    "#plt.axhline(0)\n",
    "plt.scatter(X[:,0], X[:,1])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "approved-qualification",
   "metadata": {},
   "source": [
    "- There seems to be some relavancy between low cell counts of iPS cell-derived cardiomyocytes and samples ~1-3."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "humanitarian-pickup",
   "metadata": {},
   "source": [
    "# Volcano plots "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eastern-integrity",
   "metadata": {},
   "source": [
    "### Tutorials:\n",
    "- https://www.reneshbedre.com/blog/volcano.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "micro-clerk",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "different-divide",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: bioinfokit in /opt/python/lib/python3.8/site-packages (2.0.3)\n",
      "Requirement already satisfied: matplotlib in /opt/python/lib/python3.8/site-packages (from bioinfokit) (3.3.3)\n",
      "Requirement already satisfied: seaborn in /opt/python/lib/python3.8/site-packages (from bioinfokit) (0.11.1)\n",
      "Requirement already satisfied: matplotlib-venn in /opt/python/lib/python3.8/site-packages (from bioinfokit) (0.11.6)\n",
      "Requirement already satisfied: adjustText in /opt/python/lib/python3.8/site-packages (from bioinfokit) (0.7.3)\n",
      "Requirement already satisfied: tabulate in /opt/python/lib/python3.8/site-packages (from bioinfokit) (0.8.9)\n",
      "Requirement already satisfied: pandas in /opt/python/lib/python3.8/site-packages (from bioinfokit) (1.2.0)\n",
      "Requirement already satisfied: scipy in /opt/python/lib/python3.8/site-packages (from bioinfokit) (1.6.0)\n",
      "Requirement already satisfied: statsmodels in /opt/python/lib/python3.8/site-packages (from bioinfokit) (0.12.1)\n",
      "Requirement already satisfied: textwrap3 in /opt/python/lib/python3.8/site-packages (from bioinfokit) (0.9.2)\n",
      "Requirement already satisfied: numpy in /opt/python/lib/python3.8/site-packages (from bioinfokit) (1.19.5)\n",
      "Requirement already satisfied: scikit-learn in /opt/python/lib/python3.8/site-packages (from bioinfokit) (0.24.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/python/lib/python3.8/site-packages (from matplotlib->bioinfokit) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/python/lib/python3.8/site-packages (from matplotlib->bioinfokit) (1.3.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/python/lib/python3.8/site-packages (from matplotlib->bioinfokit) (2.4.7)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/python/lib/python3.8/site-packages (from matplotlib->bioinfokit) (2.8.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/python/lib/python3.8/site-packages (from matplotlib->bioinfokit) (8.1.0)\n",
      "Requirement already satisfied: six in /opt/python/lib/python3.8/site-packages (from cycler>=0.10->matplotlib->bioinfokit) (1.15.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/python/lib/python3.8/site-packages (from pandas->bioinfokit) (2020.5)\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/python/lib/python3.8/site-packages (from scikit-learn->bioinfokit) (1.0.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/python/lib/python3.8/site-packages (from scikit-learn->bioinfokit) (2.1.0)\n",
      "Requirement already satisfied: patsy>=0.5 in /opt/python/lib/python3.8/site-packages (from statsmodels->bioinfokit) (0.5.1)\n",
      "\u001b[33mWARNING: You are using pip version 20.3.3; however, version 21.0.1 is available.\n",
      "You should consider upgrading via the '/opt/python/bin/python3.8 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install bioinfokit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "opened-immune",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gene</th>\n",
       "      <th>SEC24B-AS1</th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A1CF</th>\n",
       "      <th>GGACT</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2ML1</th>\n",
       "      <th>A2MP1</th>\n",
       "      <th>A4GALT</th>\n",
       "      <th>A4GNT</th>\n",
       "      <th>AAAS</th>\n",
       "      <th>...</th>\n",
       "      <th>ERCC-00031</th>\n",
       "      <th>ERCC-00042</th>\n",
       "      <th>ERCC-00069</th>\n",
       "      <th>ERCC-00084</th>\n",
       "      <th>ERCC-00097</th>\n",
       "      <th>ERCC-00112</th>\n",
       "      <th>ERCC-00131</th>\n",
       "      <th>ERCC-00136</th>\n",
       "      <th>ERCC-00157</th>\n",
       "      <th>ERCC-00171</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Sample 1</th>\n",
       "      <td>1.152</td>\n",
       "      <td>0.576</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>62.447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>212.046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50.995</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.144</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 2</th>\n",
       "      <td>0.901</td>\n",
       "      <td>1.276</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>70.575</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>219.383</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.027</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 3</th>\n",
       "      <td>0.348</td>\n",
       "      <td>0.765</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>99.274</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.139</td>\n",
       "      <td>229.206</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.883</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 4</th>\n",
       "      <td>1.404</td>\n",
       "      <td>0.468</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.281</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>13.014</td>\n",
       "      <td>0.0</td>\n",
       "      <td>61.325</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sample 5</th>\n",
       "      <td>1.282</td>\n",
       "      <td>0.275</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.183</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>11.449</td>\n",
       "      <td>0.0</td>\n",
       "      <td>67.592</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 20812 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Gene      SEC24B-AS1   A1BG  A1CF  GGACT     A2M  A2ML1  A2MP1   A4GALT  \\\n",
       "Sample 1       1.152  0.576   0.0  0.000  62.447    0.0  0.000  212.046   \n",
       "Sample 2       0.901  1.276   0.0  0.000  70.575    0.0  0.000  219.383   \n",
       "Sample 3       0.348  0.765   0.0  0.000  99.274    0.0  0.139  229.206   \n",
       "Sample 4       1.404  0.468   0.0  0.281   0.375    0.0  0.000   13.014   \n",
       "Sample 5       1.282  0.275   0.0  0.183   0.183    0.0  0.000   11.449   \n",
       "\n",
       "Gene      A4GNT    AAAS  ...  ERCC-00031  ERCC-00042  ERCC-00069  ERCC-00084  \\\n",
       "Sample 1    0.0  50.995  ...         0.0         0.0         0.0         0.0   \n",
       "Sample 2    0.0  49.027  ...         0.0         0.0         0.0         0.0   \n",
       "Sample 3    0.0  45.883  ...         0.0         0.0         0.0         0.0   \n",
       "Sample 4    0.0  61.325  ...         0.0         0.0         0.0         0.0   \n",
       "Sample 5    0.0  67.592  ...         0.0         0.0         0.0         0.0   \n",
       "\n",
       "Gene      ERCC-00097  ERCC-00112  ERCC-00131  ERCC-00136  ERCC-00157  \\\n",
       "Sample 1         0.0       0.144         0.0         0.0         0.0   \n",
       "Sample 2         0.0       0.000         0.0         0.0         0.0   \n",
       "Sample 3         0.0       0.000         0.0         0.0         0.0   \n",
       "Sample 4         0.0       0.000         0.0         0.0         0.0   \n",
       "Sample 5         0.0       0.000         0.0         0.0         0.0   \n",
       "\n",
       "Gene      ERCC-00171  \n",
       "Sample 1         0.0  \n",
       "Sample 2         0.0  \n",
       "Sample 3         0.0  \n",
       "Sample 4         0.0  \n",
       "Sample 5         0.0  \n",
       "\n",
       "[5 rows x 20812 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('Desktop/Projects/School/iPSC/GSE154580_rpm.bcmatrix copy.csv', sep= '\\t',  na_filter=False, parse_dates = True)\n",
    "\n",
    "df.index = df[\"Gene\"]\n",
    "df_T = df.drop([ \"Gene\"], axis=1).T\n",
    "df_T.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "million-finance",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "multiple-mystery",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "assigned-sleeping",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "clear-welding",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "apart-point",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "worst-berry",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
